
@{
    ViewBag.Title = "LAndingView";
    Layout = "~/Views/Shared/EmptyLayout.cshtml";
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Web 1920 – 1</title>
    <style id="applicationStylesheet" type="text/css">
	.mediaViewInfo {
		--web-view-name: Web 1920 – 1;
		--web-view-id: Web_1920__1;
		--web-scale-on-resize: true;
		--web-enable-deep-linking: true;
	}
	:root {
		--web-view-ids: Web_1920__1;
	}
	* {
		margin: 0;
		padding: 0;
		box-sizing: border-box;
		border: none;
	}
	#Web_1920__1 {
		position: absolute;
		width: 1920px;
		height: 4291px;
		background-color: rgba(44,59,137,1);
		overflow: hidden;
		--web-view-name: Web 1920 – 1;
		--web-view-id: Web_1920__1;
		--web-scale-on-resize: true;
		--web-enable-deep-linking: true;
	}


	}
	#Groupe_2 {
		position: absolute;
		width: 1587.262px;
		height: 82px;
		left: 149px;
		top: 53px;
		overflow: visible;
	}
	#menu {
		position: absolute;
		width: 1587.262px;
		height: 82px;
		left: 0px;
		top: 0px;
		overflow: visible;
	}
	#ACCEUIL {
		left: 121px;
		top: 29px;
		position: absolute;
		overflow: visible;
		width: 111px;
		white-space: nowrap;
		line-height: 34px;
		margin-top: -7.5px;
		text-align: center;
		font-family: Montserrat;
		font-style: normal;
		font-weight: bold;
		font-size: 19px;
		color: rgba(174,180,166,1);
		letter-spacing: 2px;
	}
	#CONTACT {
		left: 693px;
		top: 31px;
		position: absolute;
		overflow: visible;
		width: 119px;
		white-space: nowrap;
		transition: all 0.4s ease-out;
		--web-animation: fadein 0.4s ease-out;
		--web-action-type: page;
		--web-action-target: Web_1920___7.html;
		cursor: pointer;
		line-height: 34px;
		margin-top: -7.5px;
		text-align: center;
		font-family: Montserrat;
		font-style: normal;
		font-weight: bold;
		font-size: 19px;
		color: rgba(174,180,166,1);
		letter-spacing: 2px;
	}
	#Rectangle_28 {
		fill: rgba(210,189,36,1);
	}
	.Rectangle_28 {
		position: absolute;
		overflow: visible;
		width: 19px;
		height: 6px;
		left: 297px;
		top: 42px;
	}
	#Rectangle_33 {
		fill: rgba(210,189,36,1);
	}
	.Rectangle_33 {
		position: absolute;
		overflow: visible;
		width: 19px;
		height: 6px;
		left: 612px;
		top: 42px;
	}
	#NOS_PRODUITS {
		left: 366px;
		top: 31px;
		position: absolute;
		overflow: visible;
		width: 197px;
		white-space: nowrap;
		transition: all 0.4s ease-out;
		--web-animation: fadein 0.4s ease-out;
		--web-action-type: page;
		--web-action-target: Web_1920___10.html;
		cursor: pointer;
		line-height: 33px;
		margin-top: -7px;
		text-align: center;
		font-family: Montserrat;
		font-style: normal;
		font-weight: bold;
		font-size: 19px;
		color: rgba(255,255,255,1);
		letter-spacing: 2px;
	}
	#bttn {
		position: absolute;
		width: 203.774px;
		height: 47.824px;
		left: 1281px;
		top: 18.501px;
		overflow: visible;
		transition: all 0.4s ease-out;
		--web-animation: fadein 0.4s ease-out;
		--web-action-type: page;
		--web-action-target: Web_1920___8.html;
		cursor: pointer;
	}
	#Rectangle_1 {
		fill: transparent;
		stroke: rgba(210,189,36,1);
		stroke-width: 4px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Rectangle_1 {
		filter: drop-shadow(0px 20px 40px rgba(0, 0, 0, 0.6));
		position: absolute;
		overflow: visible;
		width: 323.774px;
		height: 167.824px;
		left: 0px;
		top: 0px;
	}
	#Se_Connecter {
		left: 30px;
		top: 14.499px;
		position: absolute;
		overflow: visible;
		width: 149px;
		white-space: nowrap;
		line-height: 36px;
		margin-top: -10px;
		text-align: center;
		font-family: Montserrat;
		font-style: normal;
		font-weight: bold;
		font-size: 16px;
		color: rgba(255,255,255,1);
		letter-spacing: 2px;
	}
	#menu_icon {
		position: absolute;
		width: 48.262px;
		height: 36px;
		left: 1539px;
		top: 34.844px;
		overflow: visible;
	}
	#Rectangle_25 {
		fill: rgba(174,180,166,1);
	}
	.Rectangle_25 {
		position: absolute;
		overflow: visible;
		width: 48.262px;
		height: 4px;
		left: 0px;
		top: 0px;
	}
	#Rectangle_26 {
		fill: rgba(174,180,166,1);
	}
	.Rectangle_26 {
		position: absolute;
		overflow: visible;
		width: 48.262px;
		height: 4px;
		left: 0px;
		top: 16px;
	}
	#Rectangle_27 {
		fill: rgba(174,180,166,1);
	}
	.Rectangle_27 {
		position: absolute;
		overflow: visible;
		width: 48.262px;
		height: 4px;
		left: 0px;
		top: 32px;
	}
	#logo {
		position: absolute;
		width: 82px;
		height: 82px;
		left: 0px;
		top: 0px;
		overflow: visible;
	}
	#NOS_SERVICES {
		left: 672px;
		top: 1224px;
		position: absolute;
		overflow: visible;
		width: 615px;
		white-space: nowrap;
		line-height: 133px;
		margin-top: -35.5px;
		text-align: center;
		font-family: Montserrat;
		font-style: normal;
		font-weight: bold;
		font-size: 62px;
		color: rgba(255,255,255,1);
		letter-spacing: 2px;
	}
	#NOS_REFERENCES {
		left: 584px;
		top: 2346px;
		position: absolute;
		overflow: visible;
		width: 753px;
		white-space: nowrap;
		line-height: 133px;
		margin-top: -35.5px;
		text-align: center;
		font-family: Montserrat;
		font-style: normal;
		font-weight: bold;
		font-size: 62px;
		color: rgba(255,255,255,1);
		letter-spacing: 2px;
	}
	#Grille_de_rptition_1 {
		position: absolute;
		width: 1694px;
		height: 967px;
		left: 113px;
		top: 1338px;
		overflow: hidden;
	}
	#Groupe_5 {
		position: absolute;
		width: 546px;
		height: 464px;
		left: 0px;
		top: 0px;
		overflow: visible;
	}
	#Rectangle_34 {
		fill: rgba(42,53,110,1);
		stroke: rgba(112,112,112,1);
		stroke-width: 1px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Rectangle_34 {
		position: absolute;
		overflow: visible;
		width: 546px;
		height: 464px;
		left: 0px;
		top: 0px;
		transition: all 0.3s ease-out;
		--web-animation: fadein 0.3s ease-out;
		--web-action-type: page;
		--web-action-target: Web_1920___2.html;
		cursor: pointer;
	}
	#Icon_awesome-arrow-circle-up {
		fill: rgba(210,189,36,1);
	}
	.Icon_awesome-arrow-circle-up {
		overflow: visible;
		position: absolute;
		width: 80.925px;
		height: 80.925px;
		transform: translate(-121px, -1389px) matrix(1,0,0,1,541,1719) rotate(89deg);
		transform-origin: center;
		left: 0px;
		top: 0px;
		transition: all 0.3s ease-out;
		--web-animation: fadein 0.3s ease-out;
		--web-action-type: page;
		--web-action-target: Web_1920___2.html;
		cursor: pointer;
	}
	#Groupe_5_bb {
		position: absolute;
		width: 546px;
		height: 464px;
		left: 566px;
		top: 0px;
		overflow: visible;
	}
	#Rectangle_34_bc {
		fill: rgba(42,53,110,1);
		stroke: rgba(112,112,112,1);
		stroke-width: 1px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Rectangle_34_bc {
		position: absolute;
		overflow: visible;
		width: 546px;
		height: 464px;
		left: 0px;
		top: 0px;
	}
	#Icon_awesome-arrow-circle-up_bd {
		fill: rgba(210,189,36,1);
	}
	.Icon_awesome-arrow-circle-up_bd {
		overflow: visible;
		position: absolute;
		width: 80.925px;
		height: 80.925px;
		transform: translate(-121px, -1389px) matrix(1,0,0,1,541,1719) rotate(89deg);
		transform-origin: center;
		left: 0px;
		top: 0px;
	}
	#Groupe_5_be {
		position: absolute;
		width: 546px;
		height: 464px;
		left: 1132px;
		top: 0px;
		overflow: visible;
	}
	#Rectangle_34_bf {
		fill: rgba(42,53,110,1);
		stroke: rgba(112,112,112,1);
		stroke-width: 1px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Rectangle_34_bf {
		position: absolute;
		overflow: visible;
		width: 546px;
		height: 464px;
		left: 0px;
		top: 0px;
	}
	#Icon_awesome-arrow-circle-up_bg {
		fill: rgba(210,189,36,1);
	}
	.Icon_awesome-arrow-circle-up_bg {
		overflow: visible;
		position: absolute;
		width: 80.925px;
		height: 80.925px;
		transform: translate(-121px, -1389px) matrix(1,0,0,1,541,1719) rotate(89deg);
		transform-origin: center;
		left: 0px;
		top: 0px;
	}
	#Groupe_5_bh {
		position: absolute;
		width: 546px;
		height: 464px;
		left: 0px;
		top: 484px;
		overflow: visible;
	}
	#Rectangle_34_bi {
		fill: rgba(42,53,110,1);
		stroke: rgba(112,112,112,1);
		stroke-width: 1px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Rectangle_34_bi {
		position: absolute;
		overflow: visible;
		width: 546px;
		height: 464px;
		left: 0px;
		top: 0px;
	}
	#Icon_awesome-arrow-circle-up_bj {
		fill: rgba(210,189,36,1);
	}
	.Icon_awesome-arrow-circle-up_bj {
		overflow: visible;
		position: absolute;
		width: 80.925px;
		height: 80.925px;
		transform: translate(-121px, -1389px) matrix(1,0,0,1,541,1719) rotate(89deg);
		transform-origin: center;
		left: 0px;
		top: 0px;
	}
	#Groupe_5_bk {
		position: absolute;
		width: 546px;
		height: 464px;
		left: 566px;
		top: 484px;
		overflow: visible;
	}
	#Rectangle_34_bl {
		fill: rgba(42,53,110,1);
		stroke: rgba(112,112,112,1);
		stroke-width: 1px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Rectangle_34_bl {
		position: absolute;
		overflow: visible;
		width: 546px;
		height: 464px;
		left: 0px;
		top: 0px;
	}
	#Icon_awesome-arrow-circle-up_bm {
		fill: rgba(210,189,36,1);
	}
	.Icon_awesome-arrow-circle-up_bm {
		overflow: visible;
		position: absolute;
		width: 80.925px;
		height: 80.925px;
		transform: translate(-121px, -1389px) matrix(1,0,0,1,541,1719) rotate(89deg);
		transform-origin: center;
		left: 0px;
		top: 0px;
	}
	#Groupe_5_bn {
		position: absolute;
		width: 546px;
		height: 464px;
		left: 1132px;
		top: 484px;
		overflow: visible;
	}
	#Rectangle_34_bo {
		fill: rgba(42,53,110,1);
		stroke: rgba(112,112,112,1);
		stroke-width: 1px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Rectangle_34_bo {
		position: absolute;
		overflow: visible;
		width: 546px;
		height: 464px;
		left: 0px;
		top: 0px;
	}
	#Icon_awesome-arrow-circle-up_bp {
		fill: rgba(210,189,36,1);
	}
	.Icon_awesome-arrow-circle-up_bp {
		overflow: visible;
		position: absolute;
		width: 80.925px;
		height: 80.925px;
		transform: translate(-121px, -1389px) matrix(1,0,0,1,541,1719) rotate(89deg);
		transform-origin: center;
		left: 0px;
		top: 0px;
	}
	#ETUDE_TECHNIQUE {
		left: 136px;
		top: 1378px;
		position: absolute;
		overflow: visible;
		width: 491px;
		white-space: nowrap;
		line-height: 81px;
		margin-top: -21.5px;
		text-align: center;
		font-family: Montserrat;
		font-style: normal;
		font-weight: bold;
		font-size: 38px;
		color: rgba(174,180,166,1);
		letter-spacing: 2px;
		text-decoration: underline;
	}
	#Fabrication_et {
		left: 164px;
		top: 1849px;
		position: absolute;
		overflow: visible;
		width: 435px;
		white-space: nowrap;
		line-height: 81px;
		margin-top: -21.5px;
		text-align: center;
		font-family: Montserrat;
		font-style: normal;
		font-weight: bold;
		font-size: 38px;
		color: rgba(174,180,166,1);
		letter-spacing: 2px;
		text-decoration: underline;
		text-transform: uppercase;
	}
	#CONTRAT_ {
		left: 1385px;
		top: 1849px;
		position: absolute;
		overflow: visible;
		width: 257px;
		white-space: nowrap;
		line-height: 81px;
		margin-top: -21.5px;
		text-align: center;
		font-family: Montserrat;
		font-style: normal;
		font-weight: bold;
		font-size: 38px;
		color: rgba(174,180,166,1);
		letter-spacing: 2px;
		text-decoration: underline;
		text-transform: uppercase;
	}
	#solution_sur_mesure {
		left: 129px;
		top: 1913px;
		position: absolute;
		overflow: visible;
		width: 505px;
		white-space: nowrap;
		line-height: 66px;
		margin-top: -17.5px;
		text-align: center;
		font-family: Montserrat;
		font-style: normal;
		font-weight: bold;
		font-size: 31px;
		color: rgba(174,180,166,1);
		letter-spacing: 2px;
		text-decoration: underline;
		text-transform: uppercase;
	}
	#DENTRETIENMAINTENANCE {
		left: 1257px;
		top: 1913px;
		position: absolute;
		overflow: visible;
		width: 513px;
		white-space: nowrap;
		line-height: 55px;
		margin-top: -14.5px;
		text-align: center;
		font-family: Montserrat;
		font-style: normal;
		font-weight: bold;
		font-size: 26px;
		color: rgba(174,180,166,1);
		letter-spacing: 2px;
		text-decoration: underline;
		text-transform: uppercase;
	}
	#EXPERTISE_ {
		left: 805px;
		top: 1378px;
		position: absolute;
		overflow: visible;
		width: 279px;
		white-space: nowrap;
		line-height: 81px;
		margin-top: -21.5px;
		text-align: center;
		font-family: Montserrat;
		font-style: normal;
		font-weight: bold;
		font-size: 38px;
		color: rgba(174,180,166,1);
		letter-spacing: 2px;
		text-decoration: underline;
	}
	#DEVIS_GRATUIT {
		left: 1316px;
		top: 1378px;
		position: absolute;
		overflow: visible;
		width: 397px;
		white-space: nowrap;
		line-height: 81px;
		margin-top: -21.5px;
		text-align: center;
		font-family: Montserrat;
		font-style: normal;
		font-weight: bold;
		font-size: 38px;
		color: rgba(174,180,166,1);
		letter-spacing: 2px;
		text-decoration: underline;
	}
	#Service_aprs_vente_ {
		left: 717px;
		top: 1849px;
		position: absolute;
		overflow: visible;
		width: 487px;
		white-space: nowrap;
		line-height: 66px;
		margin-top: -17.5px;
		text-align: center;
		font-family: Montserrat;
		font-style: normal;
		font-weight: bold;
		font-size: 31px;
		color: rgba(174,180,166,1);
		letter-spacing: 2px;
		text-decoration: underline;
		text-transform: uppercase;
	}
	#FERMETURES_SOLUTIONS_ralise_en {
		left: 136px;
		top: 1442px;
		position: absolute;
		overflow: hidden;
		width: 480px;
		height: 253px;
		line-height: 60px;
		margin-top: -13.5px;
		text-align: left;
		font-family: Montserrat;
		font-style: normal;
		font-weight: bold;
		font-size: 33px;
		color: rgba(255,255,255,1);
		letter-spacing: -0.2px;
	}
	#Vous_vous_questionnez_sur_la_p {
		left: 142px;
		top: 1968px;
		position: absolute;
		overflow: hidden;
		width: 480px;
		height: 253px;
		line-height: 60px;
		margin-top: -13.5px;
		text-align: left;
		font-family: Montserrat;
		font-style: normal;
		font-weight: bold;
		font-size: 33px;
		color: rgba(255,255,255,1);
		letter-spacing: -0.2px;
	}
	#LEADER_FERMETURE_sassure_du_ma {
		left: 1274px;
		top: 1962px;
		position: absolute;
		overflow: visible;
		width: 480px;
		height: 253px;
		line-height: 60px;
		margin-top: -13.5px;
		text-align: left;
		font-family: Montserrat;
		font-style: normal;
		font-weight: bold;
		font-size: 33px;
		color: rgba(255,255,255,1);
		letter-spacing: -0.2px;
	}
	#FERMETURES_SOLUTIONS_sappuie_s {
		left: 699px;
		top: 1442px;
		position: absolute;
		overflow: visible;
		width: 480px;
		height: 253px;
		line-height: 60px;
		margin-top: -13.5px;
		text-align: left;
		font-family: Montserrat;
		font-style: normal;
		font-weight: bold;
		font-size: 33px;
		color: rgba(255,255,255,1);
		letter-spacing: -0.2px;
	}
	#Vous_avez_un_projet_un_besoin_ {
		left: 1286px;
		top: 1442px;
		position: absolute;
		overflow: visible;
		width: 480px;
		height: 253px;
		line-height: 60px;
		margin-top: -13.5px;
		text-align: left;
		font-family: Montserrat;
		font-style: normal;
		font-weight: bold;
		font-size: 33px;
		color: rgba(255,255,255,1);
		letter-spacing: -0.2px;
	}
	#Vous_avez_un_problme_et_souhai {
		left: 721px;
		top: 1913px;
		position: absolute;
		overflow: visible;
		width: 480px;
		height: 253px;
		line-height: 60px;
		margin-top: -13.5px;
		text-align: left;
		font-family: Montserrat;
		font-style: normal;
		font-weight: bold;
		font-size: 33px;
		color: rgba(255,255,255,1);
		letter-spacing: -0.2px;
	}
	#AM-IMMOBILIER {
		position: absolute;
		width: 291px;
		height: 264px;
		left: 40px;
		top: 2520px;
		overflow: visible;
	}
	#BYMARO-1 {
		position: absolute;
		width: 291px;
		height: 264px;
		left: 351px;
		top: 2520px;
		overflow: visible;
	}
	#CNIA {
		position: absolute;
		width: 291px;
		height: 264px;
		left: 662px;
		top: 2520px;
		overflow: visible;
	}
	#COCACOLA {
		position: absolute;
		width: 291px;
		height: 264px;
		left: 973px;
		top: 2520px;
		overflow: visible;
	}
	#COLGATE-ET-PALMOLIVE-300x161 {
		position: absolute;
		width: 291px;
		height: 264px;
		left: 1284px;
		top: 2520px;
		overflow: visible;
	}
	#GSEM-300x161 {
		position: absolute;
		width: 291px;
		height: 264px;
		left: 1595px;
		top: 2520px;
		overflow: visible;
	}
	#HYUDAI {
		position: absolute;
		width: 291px;
		height: 264px;
		left: 40px;
		top: 2804px;
		overflow: visible;
	}
	#Rectangle_35 {
		fill: rgba(255,255,255,1);
		stroke: rgba(112,112,112,1);
		stroke-width: 1px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Rectangle_35 {
		position: absolute;
		overflow: visible;
		width: 291px;
		height: 264px;
		left: 351px;
		top: 2804px;
	}
	#LILAS-PARK {
		position: absolute;
		width: 291px;
		height: 264px;
		left: 662px;
		top: 2804px;
		overflow: visible;
	}
	#LOGO-CGI {
		position: absolute;
		width: 291px;
		height: 264px;
		left: 973px;
		top: 2804px;
		overflow: visible;
	}
	#Rectangle_35_ce {
		fill: rgba(255,255,255,1);
		stroke: rgba(112,112,112,1);
		stroke-width: 1px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Rectangle_35_ce {
		position: absolute;
		overflow: visible;
		width: 291px;
		height: 264px;
		left: 1284px;
		top: 2804px;
	}
	#Rectangle_35_cf {
		fill: rgba(255,255,255,1);
		stroke: rgba(112,112,112,1);
		stroke-width: 1px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Rectangle_35_cf {
		position: absolute;
		overflow: visible;
		width: 291px;
		height: 264px;
		left: 1595px;
		top: 2804px;
	}
	#Rectangle_35_cg {
		fill: rgba(255,255,255,1);
		stroke: rgba(112,112,112,1);
		stroke-width: 1px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Rectangle_35_cg {
		position: absolute;
		overflow: visible;
		width: 291px;
		height: 264px;
		left: 40px;
		top: 3088px;
	}
	#PRODEC {
		position: absolute;
		width: 291px;
		height: 264px;
		left: 351px;
		top: 3088px;
		overflow: visible;
	}
	#RENEAULT {
		position: absolute;
		width: 291px;
		height: 264px;
		left: 662px;
		top: 3088px;
		overflow: visible;
	}
	#RMA-WATANIA {
		position: absolute;
		width: 291px;
		height: 264px;
		left: 973px;
		top: 3088px;
		overflow: visible;
	}
	#SNTL {
		position: absolute;
		width: 291px;
		height: 264px;
		left: 1284px;
		top: 3088px;
		overflow: visible;
	}
	#SUPERCERAME {
		position: absolute;
		width: 291px;
		height: 264px;
		left: 1595px;
		top: 3088px;
		overflow: visible;
	}
	#Rectangle_35_cm {
		fill: rgba(255,255,255,1);
		stroke: rgba(112,112,112,1);
		stroke-width: 1px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Rectangle_35_cm {
		position: absolute;
		overflow: visible;
		width: 291px;
		height: 264px;
		left: 479px;
		top: 3396px;
	}
	#Rectangle_35_cn {
		fill: rgba(255,255,255,1);
		stroke: rgba(112,112,112,1);
		stroke-width: 1px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Rectangle_35_cn {
		position: absolute;
		overflow: visible;
		width: 291px;
		height: 264px;
		left: 790px;
		top: 3396px;
	}
	#Rectangle_35_co {
		fill: rgba(255,255,255,1);
		stroke: rgba(112,112,112,1);
		stroke-width: 1px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Rectangle_35_co {
		position: absolute;
		overflow: visible;
		width: 291px;
		height: 264px;
		left: 1101px;
		top: 3396px;
	}
	#LAFARGE-300x104 {
		position: absolute;
		width: 255px;
		height: 88px;
		left: 366px;
		top: 2882px;
		overflow: visible;
	}
	#LOGO-DLM {
		position: absolute;
		width: 268px;
		height: 143px;
		left: 1305px;
		top: 2865px;
		overflow: visible;
	}
	#LOGO-PROMOPHARMA-300x87 {
		position: absolute;
		width: 282.759px;
		height: 82px;
		left: 1593px;
		top: 2895.5px;
		overflow: visible;
	}
	#MAZAGAN-300x67 {
		position: absolute;
		width: 264px;
		height: 59.5px;
		left: 67px;
		top: 3190.25px;
		overflow: visible;
	}
	#TATE-LYLE-300x90 {
		position: absolute;
		width: 258px;
		height: 77px;
		left: 492px;
		top: 3490px;
		overflow: visible;
	}
	#UNIVERSACIER {
		position: absolute;
		width: 222.5px;
		height: 129.792px;
		left: 824.25px;
		top: 3463.104px;
		overflow: visible;
	}
	#WESTERN-UNION-300x74 {
		position: absolute;
		width: 246px;
		height: 61px;
		left: 1124px;
		top: 3490px;
		overflow: visible;
	}
	#Footer_8 {
		position: absolute;
		width: 1920px;
		height: 368px;
		left: 0px;
		top: 3979px;
		overflow: visible;
	}
	#Base {
		fill: rgba(47,56,101,1);
	}
	.Base {
		position: absolute;
		overflow: visible;
		width: 1920px;
		height: 317px;
		left: 0px;
		top: 0px;
	}
	#Facebook_Twitter_Instagram {
		left: 78.781px;
		top: 106.949px;
		position: absolute;
		overflow: visible;
		width: 103px;
		white-space: nowrap;
		line-height: 40px;
		margin-top: -8.5px;
		text-align: left;
		font-family: Arial;
		font-style: normal;
		font-weight: normal;
		font-size: 23px;
		color: rgba(247,247,247,1);
	}
	#_Moayas {
		left: 37px;
		top: 348px;
		position: absolute;
		overflow: visible;
		width: 86px;
		white-space: nowrap;
		line-height: 36px;
		margin-top: -9px;
		text-align: right;
		font-family: Arial;
		font-style: normal;
		font-weight: normal;
		font-size: 18px;
		color: rgba(255,255,255,1);
	}
	#Required_Field {
		position: absolute;
		width: 266px;
		height: 51px;
		left: 425.781px;
		top: 186.949px;
		overflow: visible;
	}
	#Rectangle_130 {
		fill: transparent;
		stroke: rgba(255,255,255,1);
		stroke-width: 1px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Rectangle_130 {
		position: absolute;
		overflow: visible;
		width: 266px;
		height: 51px;
		left: 0px;
		top: 0px;
	}
	#Votre_Adresse_email {
		left: 26px;
		top: 17px;
		position: absolute;
		overflow: visible;
		width: 134px;
		white-space: nowrap;
		text-align: left;
		font-family: Arial;
		font-style: normal;
		font-weight: normal;
		font-size: 15px;
		color: rgba(255,255,255,1);
	}
	#button {
		position: absolute;
		width: 76px;
		height: 51px;
		left: 746.781px;
		top: 186.949px;
		overflow: visible;
	}
	#Rectangle_131 {
		fill: rgba(210,189,36,1);
	}
	.Rectangle_131 {
		position: absolute;
		overflow: visible;
		width: 76px;
		height: 51px;
		left: 0px;
		top: 0px;
	}
	#OK {
		left: 29px;
		top: 19px;
		position: absolute;
		overflow: visible;
		width: 19px;
		white-space: nowrap;
		line-height: 14px;
		margin-top: -1px;
		text-align: center;
		font-family: Arial;
		font-style: normal;
		font-weight: normal;
		font-size: 12px;
		color: rgba(248,248,248,1);
	}
	#Recevez_nos_nouvelles {
		left: 414.781px;
		top: 110.949px;
		position: absolute;
		overflow: visible;
		width: 176px;
		white-space: nowrap;
		text-align: left;
		font-family: Arial;
		font-style: normal;
		font-weight: normal;
		font-size: 17px;
		color: rgba(255,255,255,1);
	}
	#Trac_38 {
		fill: rgba(255,255,255,1);
	}
	.Trac_38 {
		overflow: visible;
		position: absolute;
		width: 9.269px;
		height: 17.75px;
		left: 37px;
		top: 110.54px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Trac_39 {
		fill: rgba(255,255,255,1);
	}
	.Trac_39 {
		overflow: visible;
		position: absolute;
		width: 17.75px;
		height: 14.397px;
		left: 37.905px;
		top: 156.776px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Trac_40 {
		fill: rgba(255,255,255,1);
	}
	.Trac_40 {
		overflow: visible;
		position: absolute;
		width: 17.75px;
		height: 17.75px;
		left: 37.905px;
		top: 200.654px;
		transform: matrix(1,0,0,1,0,0);
	}
	#_Lot_El_Massar_n97_Route____de {
		left: 1499px;
		top: 72.949px;
		position: absolute;
		overflow: visible;
		width: 208px;
		height: 74px;
		text-align: left;
		font-family: Montserrat;
		font-style: normal;
		font-weight: bold;
		font-size: 22px;
		color: rgba(174,180,166,1);
		letter-spacing: -0.2px;
	}
	#ID212657539555 {
		left: 1499px;
		top: 167.949px;
		position: absolute;
		overflow: hidden;
		width: 166px;
		height: 26px;
		text-align: left;
		font-family: Montserrat;
		font-style: normal;
		font-weight: bold;
		font-size: 22px;
		color: rgba(174,180,166,1);
		letter-spacing: -0.2px;
	}
	#Webmasterfermeture-solutionsma {
		left: 1472px;
		top: 224.949px;
		position: absolute;
		overflow: hidden;
		width: 418px;
		height: 26px;
		text-align: left;
		font-family: Montserrat;
		font-style: normal;
		font-weight: bold;
		font-size: 22px;
		color: rgba(174,180,166,1);
		letter-spacing: -0.2px;
	}
	#Icon_awesome-home {
		fill: rgba(210,189,36,1);
	}
	.Icon_awesome-home {
		overflow: visible;
		position: absolute;
		width: 63.395px;
		height: 44.877px;
		left: 1419px;
		top: 82.371px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Icon_awesome-phone-alt {
		fill: rgba(210,189,36,1);
	}
	.Icon_awesome-phone-alt {
		overflow: visible;
		position: absolute;
		width: 43px;
		height: 43px;
		left: 1429px;
		top: 152.015px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Icon_simple-email {
		fill: rgba(210,189,36,1);
	}
	.Icon_simple-email {
		overflow: visible;
		position: absolute;
		width: 43px;
		height: 47.418px;
		left: 1429px;
		top: 219.632px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Composant_3__1 {
		position: absolute;
		width: 1892px;
		height: 911px;
		left: 14px;
		top: 243px;
		overflow: visible;
	}
	#slider_1_edited {
		position: absolute;
		width: 1892px;
		height: 911px;
		left: 0px;
		top: 0px;
		overflow: visible;
	}
	#slider2_edited {
		position: absolute;
		width: 1892px;
		height: 911px;
		left: 0px;
		top: 0px;
		overflow: visible;
	}
	#slider3 {
		position: absolute;
		width: 1892px;
		height: 911px;
		left: 0px;
		top: 0px;
		overflow: visible;
	}
	#text {
		position: absolute;
		width: 712px;
		height: 314px;
		left: 590px;
		top: 532px;
		overflow: visible;
	}
	#Fermeture_Solution_est_votre_e {
		left: 0px;
		top: 0px;
		position: absolute;
		overflow: visible;
		width: 713px;
		height: 226px;
		line-height: 60px;
		margin-top: -13.5px;
		text-align: center;
		font-family: Montserrat;
		font-style: normal;
		font-weight: bold;
		font-size: 33px;
		color: rgba(255,255,255,1);
		letter-spacing: -0.2px;
	}
	#bttn_dm {
		position: absolute;
		width: 310px;
		height: 88px;
		left: 200px;
		top: 226px;
		overflow: visible;
		transition: all 0.4s ease-out;
		--web-animation: fadein 0.4s ease-out;
		--web-action-type: page;
		--web-action-target: Web_1920___7.html;
		cursor: pointer;
	}
	#Rectangle_1_dn {
		fill: rgba(210,189,36,1);
	}
	.Rectangle_1_dn {
		filter: drop-shadow(0px 20px 40px rgba(0, 0, 0, 0.4));
		position: absolute;
		overflow: visible;
		width: 430px;
		height: 208px;
		left: 0px;
		top: 0px;
	}
	#CONTACTER_NOUS {
		left: 22px;
		top: 31px;
		position: absolute;
		overflow: visible;
		width: 261px;
		white-space: nowrap;
		line-height: 45px;
		margin-top: -12px;
		text-align: center;
		font-family: Montserrat;
		font-style: normal;
		font-weight: bold;
		font-size: 21px;
		color: rgba(255,255,255,1);
		letter-spacing: 2px;
	}
	#next {
		opacity: 0.543;
		position: absolute;
		width: 127px;
		height: 127px;
		left: 1723.589px;
		top: 473px;
		overflow: visible;
		transition: all 0.4s ease-out;
		--web-animation: fadein 0.4s ease-out;
		--web-action-type: page;
		--web-action-target: Web_1920___5.html;
		cursor: pointer;
	}
	#Ellipse_2 {
		fill: transparent;
		stroke: rgba(210,189,36,1);
		stroke-width: 6px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Ellipse_2 {
		position: absolute;
		overflow: visible;
		width: 96px;
		height: 96px;
		left: 16px;
		top: 16px;
	}
	#tree-leaf {
		transform: translate(0.282px, 0.245px) matrix(1,0,0,1,52.1865,52.2013) rotate(45deg);
		transform-origin: center;
		position: absolute;
		width: 22.246px;
		height: 22.255px;
		left: 0px;
		top: 0px;
		overflow: visible;
	}
	#Groupe_4 {
		position: absolute;
		width: 22.246px;
		height: 22.255px;
		left: 0px;
		top: 0px;
		overflow: visible;
	}
	#Trac_90 {
		fill: rgba(255,255,255,1);
	}
	.Trac_90 {
		overflow: visible;
		position: absolute;
		width: 31.467px;
		height: 31.467px;
		left: 0px;
		top: 0px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Ellipse_3 {
		opacity: 0.2;
		fill: transparent;
		stroke: rgba(174,180,166,1);
		stroke-width: 4px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Ellipse_3 {
		position: absolute;
		overflow: visible;
		width: 127px;
		height: 127px;
		left: 0px;
		top: 0px;
	}
	#next_dv {
		opacity: 0.538;
		transform: translate(0px, 0px) matrix(1,0,0,1,43.5887,473) rotate(178deg);
		transform-origin: center;
		position: absolute;
		width: 127px;
		height: 127px;
		left: 0px;
		top: 0px;
		overflow: visible;
		transition: all 0.4s ease-out;
		--web-animation: fadein 0.4s ease-out;
		--web-action-type: page;
		--web-action-target: Web_1920___6.html;
		cursor: pointer;
	}
	#Ellipse_2_dw {
		fill: transparent;
		stroke: rgba(210,189,36,1);
		stroke-width: 6px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Ellipse_2_dw {
		position: absolute;
		overflow: visible;
		width: 99.292px;
		height: 99.292px;
		left: 15.514px;
		top: 15.549px;
	}
	#tree-leaf_dx {
		transform: translate(131.064px, 126.688px) matrix(1,0,0,1,52.1865,52.2013) rotate(45deg);
		transform-origin: center;
		position: absolute;
		width: 22.246px;
		height: 22.255px;
		left: 0px;
		top: 0px;
		overflow: visible;
	}
	#Groupe_4_dy {
		position: absolute;
		width: 22.246px;
		height: 22.255px;
		left: 0px;
		top: 0px;
		overflow: visible;
	}
	#Trac_90_dz {
		fill: rgba(255,255,255,1);
	}
	.Trac_90_dz {
		overflow: visible;
		position: absolute;
		width: 31.448px;
		height: 31.449px;
		left: 0px;
		top: 0px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Ellipse_3_d {
		opacity: 0.2;
		fill: transparent;
		stroke: rgba(174,180,166,1);
		stroke-width: 4px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Ellipse_3_d {
		position: absolute;
		overflow: visible;
		width: 131.355px;
		height: 131.355px;
		left: 0px;
		top: 0px;
	}
    </style>
    <script id="applicationScript">
///////////////////////////////////////
// INITIALIZATION
///////////////////////////////////////

/**
 * Functionality for scaling, showing by media query, and navigation between multiple pages on a single page.
 * Code subject to change.
 **/

if (window.console==null) { window["console"] = { log : function() {} } }; // some browsers do not set console

var Application = function() {
	// event constants
	this.prefix = "--web-";
	this.NAVIGATION_CHANGE = "viewChange";
	this.VIEW_NOT_FOUND = "viewNotFound";
	this.VIEW_CHANGE = "viewChange";
	this.VIEW_CHANGING = "viewChanging";
	this.STATE_NOT_FOUND = "stateNotFound";
	this.APPLICATION_COMPLETE = "applicationComplete";
	this.APPLICATION_RESIZE = "applicationResize";
	this.SIZE_STATE_NAME = "data-is-view-scaled";
	this.STATE_NAME = this.prefix + "state";

	this.lastTrigger = null;
	this.lastView = null;
	this.lastState = null;
	this.lastOverlay = null;
	this.currentView = null;
	this.currentState = null;
	this.currentOverlay = null;
	this.currentQuery = {index: 0, rule: null, mediaText: null, id: null};
	this.inclusionQuery = "(min-width: 0px)";
	this.exclusionQuery = "none and (min-width: 99999px)";
	this.LastModifiedDateLabelName = "LastModifiedDateLabel";
	this.viewScaleSliderId = "ViewScaleSliderInput";
	this.pageRefreshedName = "showPageRefreshedNotification";
	this.applicationStylesheet = null;
	this.mediaQueryDictionary = {};
	this.viewsDictionary = {};
	this.addedViews = [];
	this.views = {};
	this.viewIds = [];
	this.viewQueries = {};
	this.overlays = {};
	this.overlayIds = [];
	this.numberOfViews = 0;
	this.verticalPadding = 0;
	this.horizontalPadding = 0;
	this.stateName = null;
	this.viewScale = 1;
	this.viewLeft = 0;
	this.viewTop = 0;
	this.horizontalScrollbarsNeeded = false;
	this.verticalScrollbarsNeeded = false;

	// view settings
	this.showUpdateNotification = false;
	this.showNavigationControls = false;
	this.scaleViewsToFit = false;
	this.scaleToFitOnDoubleClick = false;
	this.actualSizeOnDoubleClick = false;
	this.scaleViewsOnResize = false;
	this.navigationOnKeypress = false;
	this.showViewName = false;
	this.enableDeepLinking = true;
	this.refreshPageForChanges = false;
	this.showRefreshNotifications = true;

	// view controls
	this.scaleViewSlider = null;
	this.lastModifiedLabel = null;
	this.supportsPopState = false; // window.history.pushState!=null;
	this.initialized = false;

	// refresh properties
	this.refreshDuration = 250;
	this.lastModifiedDate = null;
	this.refreshRequest = null;
	this.refreshInterval = null;
	this.refreshContent = null;
	this.refreshContentSize = null;
	this.refreshCheckContent = false;
	this.refreshCheckContentSize = false;

	var self = this;

	self.initialize = function(event) {
		var view = self.getVisibleView();
		var views = self.getVisibleViews();
		if (view==null) view = self.getInitialView();
		self.collectViews();
		self.collectOverlays();
		self.collectMediaQueries();

		for (let index = 0; index < views.length; index++) {
			var view = views[index];
			self.setViewOptions(view);
			self.setViewVariables(view);
			self.centerView(view);
		}

		// sometimes the body size is 0 so we call this now and again later
		if (self.initialized) {
			window.addEventListener(self.NAVIGATION_CHANGE, self.viewChangeHandler);
			window.addEventListener("keyup", self.keypressHandler);
			window.addEventListener("keypress", self.keypressHandler);
			window.addEventListener("resize", self.resizeHandler);
			window.document.addEventListener("dblclick", self.doubleClickHandler);

			if (self.supportsPopState) {
				window.addEventListener('popstate', self.popStateHandler);
			}
			else {
				window.addEventListener('hashchange', self.hashChangeHandler);
			}

			// we are ready to go
			window.dispatchEvent(new Event(self.APPLICATION_COMPLETE));
		}

		if (self.initialized==false) {
			if (self.enableDeepLinking) {
				self.syncronizeViewToURL();
			}

			if (self.refreshPageForChanges) {
				self.setupRefreshForChanges();
			}

			self.initialized = true;
		}

		if (self.scaleViewsToFit) {
			self.viewScale = self.scaleViewToFit(view);

			if (self.viewScale<0) {
				setTimeout(self.scaleViewToFit, 500, view);
			}
		}
		else if (view) {
			self.viewScale = self.getViewScaleValue(view);
			self.centerView(view);
			self.updateSliderValue(self.viewScale);
		}
		else {
			// no view found
		}

		if (self.showUpdateNotification) {
			self.showNotification();
		}

		//"addEventListener" in window ? null : window.addEventListener = window.attachEvent;
		//"addEventListener" in document ? null : document.addEventListener = document.attachEvent;
	}


	///////////////////////////////////////
	// AUTO REFRESH
	///////////////////////////////////////

	self.setupRefreshForChanges = function() {
		self.refreshRequest = new XMLHttpRequest();

		if (!self.refreshRequest) {
			return false;
		}

		// get document start values immediately
		self.requestRefreshUpdate();
	}

	/**
	 * Attempt to check the last modified date by the headers
	 * or the last modified property from the byte array (experimental)
	 **/
	self.requestRefreshUpdate = function() {
		var url = document.location.href;
		var protocol = window.location.protocol;
		var method;

		try {

			if (self.refreshCheckContentSize) {
				self.refreshRequest.open('HEAD', url, true);
			}
			else if (self.refreshCheckContent) {
				self.refreshContent = document.documentElement.outerHTML;
				self.refreshRequest.open('GET', url, true);
				self.refreshRequest.responseType = "text";
			}
			else {

				// get page last modified date for the first call to compare to later
				if (self.lastModifiedDate==null) {

					// File system does not send headers in FF so get blob if possible
					if (protocol=="file:") {
						self.refreshRequest.open("GET", url, true);
						self.refreshRequest.responseType = "blob";
					}
					else {
						self.refreshRequest.open("HEAD", url, true);
						self.refreshRequest.responseType = "blob";
					}

					self.refreshRequest.onload = self.refreshOnLoadOnceHandler;

					// In some browsers (Chrome & Safari) this error occurs at send:
					//
					// Chrome - Access to XMLHttpRequest at 'file:///index.html' from origin 'null'
					// has been blocked by CORS policy:
					// Cross origin requests are only supported for protocol schemes:
					// http, data, chrome, chrome-extension, https.
					//
					// Safari - XMLHttpRequest cannot load file:///Users/user/Public/index.html. Cross origin requests are only supported for HTTP.
					//
					// Solution is to run a local server, set local permissions or test in another browser
					self.refreshRequest.send(null);

					// In MS browsers the following behavior occurs possibly due to an AJAX call to check last modified date:
					//
					// DOM7011: The code on this page disabled back and forward caching.

					// In Brave (Chrome) error when on the server
					// index.js:221 HEAD https://www.example.com/ net::ERR_INSUFFICIENT_RESOURCES
					// self.refreshRequest.send(null);

				}
				else {
					self.refreshRequest = new XMLHttpRequest();
					self.refreshRequest.onreadystatechange = self.refreshHandler;
					self.refreshRequest.ontimeout = function() {
						self.log("Couldn't find page to check for updates");
					}

					var method;
					if (protocol=="file:") {
						method = "GET";
					}
					else {
						method = "HEAD";
					}

					//refreshRequest.open('HEAD', url, true);
					self.refreshRequest.open(method, url, true);
					self.refreshRequest.responseType = "blob";
					self.refreshRequest.send(null);
				}
			}
		}
		catch (error) {
			self.log("Refresh failed for the following reason:")
			self.log(error);
		}
	}

	self.refreshHandler = function() {
		var contentSize;

		try {

			if (self.refreshRequest.readyState === XMLHttpRequest.DONE) {

				if (self.refreshRequest.status === 2 ||
					self.refreshRequest.status === 200) {
					var pageChanged = false;

					self.updateLastModifiedLabel();

					if (self.refreshCheckContentSize) {
						var lastModifiedHeader = self.refreshRequest.getResponseHeader("Last-Modified");
						contentSize = self.refreshRequest.getResponseHeader("Content-Length");
						//lastModifiedDate = refreshRequest.getResponseHeader("Last-Modified");
						var headers = self.refreshRequest.getAllResponseHeaders();
						var hasContentHeader = headers.indexOf("Content-Length")!=-1;

						if (hasContentHeader) {
							contentSize = self.refreshRequest.getResponseHeader("Content-Length");

							// size has not been set yet
							if (self.refreshContentSize==null) {
								self.refreshContentSize = contentSize;
								// exit and let interval call this method again
								return;
							}

							if (contentSize!=self.refreshContentSize) {
								pageChanged = true;
							}
						}
					}
					else if (self.refreshCheckContent) {

						if (self.refreshRequest.responseText!=self.refreshContent) {
							pageChanged = true;
						}
					}
					else {
						lastModifiedHeader = self.getLastModified(self.refreshRequest);

						if (self.lastModifiedDate!=lastModifiedHeader) {
							self.log("lastModifiedDate:" + self.lastModifiedDate + ",lastModifiedHeader:" +lastModifiedHeader);
							pageChanged = true;
						}

					}


					if (pageChanged) {
						clearInterval(self.refreshInterval);
						self.refreshUpdatedPage();
						return;
					}

				}
				else {
					self.log('There was a problem with the request.');
				}

			}
		}
		catch( error ) {
			//console.log('Caught Exception: ' + error);
		}
	}

	self.refreshOnLoadOnceHandler = function(event) {

		// get the last modified date
		if (self.refreshRequest.response) {
			self.lastModifiedDate = self.getLastModified(self.refreshRequest);

			if (self.lastModifiedDate!=null) {

				if (self.refreshInterval==null) {
					self.refreshInterval = setInterval(self.requestRefreshUpdate, self.refreshDuration);
				}
			}
			else {
				self.log("Could not get last modified date from the server");
			}
		}
	}

	self.refreshUpdatedPage = function() {
		if (self.showRefreshNotifications) {
			var date = new Date().setTime((new Date().getTime()+10000));
			document.cookie = encodeURIComponent(self.pageRefreshedName) + "=true" + "; max-age=6000;" + " path=/";
		}

		document.location.reload(true);
	}

	self.showNotification = function(duration) {
		var notificationID = self.pageRefreshedName+"ID";
		var notification = document.getElementById(notificationID);
		if (duration==null) duration = 4000;

		if (notification!=null) {return;}

		notification = document.createElement("div");
		notification.id = notificationID;
		notification.textContent = "PAGE UPDATED";
		var styleRule = ""
		styleRule = "position: fixed; padding: 7px 16px 6px 16px; font-family: Arial, sans-serif; font-size: 10px; font-weight: bold; left: 50%;";
		styleRule += "top: 20px; background-color: rgba(0,0,0,.5); border-radius: 12px; color:rgb(235, 235, 235); transition: all 2s linear;";
		styleRule += "transform: translateX(-50%); letter-spacing: .5px; filter: drop-shadow(2px 2px 6px rgba(0, 0, 0, .1))";
		notification.setAttribute("style", styleRule);

		notification.className= "PageRefreshedClass";

		document.body.appendChild(notification);

		setTimeout(function() {
			notification.style.opacity = "0";
			notification.style.filter = "drop-shadow( 0px 0px 0px rgba(0,0,0, .5))";
			setTimeout(function() {
				notification.parentNode.removeChild(notification);
			}, duration)
		}, duration);

		document.cookie = encodeURIComponent(self.pageRefreshedName) + "=; max-age=1; path=/";
	}

	/**
	 * Get the last modified date from the header
	 * or file object after request has been received
	 **/
	self.getLastModified = function(request) {
		var date;

		// file protocol - FILE object with last modified property
		if (request.response && request.response.lastModified) {
			date = request.response.lastModified;
		}

		// http protocol - check headers
		if (date==null) {
			date = request.getResponseHeader("Last-Modified");
		}

		return date;
	}

	self.updateLastModifiedLabel = function() {
		var labelValue = "";

		if (self.lastModifiedLabel==null) {
			self.lastModifiedLabel = document.getElementById("LastModifiedLabel");
		}

		if (self.lastModifiedLabel) {
			var seconds = parseInt(((new Date().getTime() - Date.parse(document.lastModified)) / 1000 / 60) * 100 + "");
			var minutes = 0;
			var hours = 0;

			if (seconds < 60) {
				seconds = Math.floor(seconds/10)*10;
				labelValue = seconds + " seconds";
			}
			else {
				minutes = parseInt((seconds/60) + "");

				if (minutes>60) {
					hours = parseInt((seconds/60/60) +"");
					labelValue += hours==1 ? " hour" : " hours";
				}
				else {
					labelValue = minutes+"";
					labelValue += minutes==1 ? " minute" : " minutes";
				}
			}

			if (seconds<10) {
				labelValue = "Updated now";
			}
			else {
				labelValue = "Updated " + labelValue + " ago";
			}

			if (self.lastModifiedLabel.firstElementChild) {
				self.lastModifiedLabel.firstElementChild.textContent = labelValue;

			}
			else if ("textContent" in self.lastModifiedLabel) {
				self.lastModifiedLabel.textContent = labelValue;
			}
		}
	}

	self.getShortString = function(string, length) {
		if (length==null) length = 30;
		string = string!=null ? string.substr(0, length).replace(/\n/g, "") : "[String is null]";
		return string;
	}

	self.getShortNumber = function(value, places) {
		if (places==null || places<1) places = 4;
		value = Math.round(value * Math.pow(10,places)) / Math.pow(10, places);
		return value;
	}

	///////////////////////////////////////
	// NAVIGATION CONTROLS
	///////////////////////////////////////

	self.updateViewLabel = function() {
		var viewNavigationLabel = document.getElementById("ViewNavigationLabel");
		var view = self.getVisibleView();
		var viewIndex = view ? self.getViewIndex(view) : -1;
		var viewName = view ? self.getViewPreferenceValue(view, self.prefix + "view-name") : null;
		var viewId = view ? view.id : null;

		if (viewNavigationLabel && view) {
			if (viewName && viewName.indexOf('"')!=-1) {
				viewName = viewName.replace(/"/g, "");
			}

			if (self.showViewName) {
				viewNavigationLabel.textContent = viewName;
				self.setTooltip(viewNavigationLabel, viewIndex + 1 + " of " + self.numberOfViews);
			}
			else {
				viewNavigationLabel.textContent = viewIndex + 1 + " of " + self.numberOfViews;
				self.setTooltip(viewNavigationLabel, viewName);
			}

		}
	}

	self.updateURL = function(view) {
		view = view == null ? self.getVisibleView() : view;
		var viewId = view ? view.id : null
		var viewFragment = view ? "#"+ viewId : null;

		if (viewId && self.viewIds.length>1 && self.enableDeepLinking) {

			if (self.supportsPopState==false) {
				self.setFragment(viewId);
			}
			else {
				if (viewFragment!=window.location.hash) {

					if (window.location.hash==null) {
						window.history.replaceState({name:viewId}, null, viewFragment);
					}
					else {
						window.history.pushState({name:viewId}, null, viewFragment);
					}
				}
			}
		}
	}

	self.updateURLState = function(view, stateName) {
		stateName = view && (stateName=="" || stateName==null) ? self.getStateNameByViewId(view.id) : stateName;

		if (self.supportsPopState==false) {
			self.setFragment(stateName);
		}
		else {
			if (stateName!=window.location.hash) {

				if (window.location.hash==null) {
					window.history.replaceState({name:view.viewId}, null, stateName);
				}
				else {
					window.history.pushState({name:view.viewId}, null, stateName);
				}
			}
		}
	}

	self.setFragment = function(value) {
		window.location.hash = "#" + value;
	}

	self.setTooltip = function(element, value) {
		// setting the tooltip in edge causes a page crash on hover
		if (/Edge/.test(navigator.userAgent)) { return; }

		if ("title" in element) {
			element.title = value;
		}
	}

	self.getStylesheetRules = function(styleSheet) {
		try {
			if (styleSheet) return styleSheet.cssRules || styleSheet.rules;

			return document.styleSheets[0]["cssRules"] || document.styleSheets[0]["rules"];
		}
		catch (error) {
			// ERRORS:
			// SecurityError: The operation is insecure.
			// Errors happen when script loads before stylesheet or loading an external css locally

			// InvalidAccessError: A parameter or an operation is not supported by the underlying object
			// Place script after stylesheet

			console.log(error);
			if (error.toString().indexOf("The operation is insecure")!=-1) {
				console.log("Load the stylesheet before the script or load the stylesheet inline until it can be loaded on a server")
			}
			return [];
		}
	}

	/**
	 * If single page application hide all of the views.
	 **/
	self.hideViews = function(selectedIndex, animation) {
		var rules = self.getStylesheetRules();
		var queryIndex = 0;
		var numberOfRules = rules!=null ? rules.length : 0;

		// loop through rules and hide media queries except selected
		for (var i=0;i<numberOfRules;i++) {
			var rule = rules[i];

			if (rule.media!=null) {

				if (queryIndex==selectedIndex) {
					self.currentQuery.mediaText = rule.conditionText;
					self.currentQuery.index = selectedIndex;
					self.currentQuery.rule = rule;
					self.enableMediaQuery(rule);
				}
				else {
					if (animation) {
						self.fadeOut(rule)
					}
					else {
						self.disableMediaQuery(rule);
					}
				}

				queryIndex++;
			}
		}

		self.numberOfViews = queryIndex;
		self.updateViewLabel();
		self.updateURL();

		self.dispatchViewChange();

		var view = self.getVisibleView();
		var viewIndex = view ? self.getViewIndex(view) : -1;

		return viewIndex==selectedIndex ? view : null;
	}

	/**
	 * Hide view
	 **/
	self.hideView = function(view) {
		var rule = view ? self.mediaQueryDictionary[view.id] : null;

		if (rule) {
			self.disableMediaQuery(rule);
		}
	}

	/**
	 * Hide overlay
	 **/
	self.hideOverlay = function(overlay) {
		var rule = overlay ? self.mediaQueryDictionary[overlay.id] : null;

		if (rule) {
			self.disableMediaQuery(rule);

			//if (self.showByMediaQuery) {
				overlay.style.display = "none";
			//}
		}
	}

	/**
	 * Show the view by media query. Does not hide current views

	self.showViewByMediaQuery = function(view, setViewOptions) {
		var id = view ? view.id : null;
		var query = id ? self.mediaQueryDictionary[id] : null;
		var isOverlay = view ? self.isOverlay(view) : false;
		setViewOptions = setViewOptions==null ? true : setViewOptions;

		if (query) {
			self.enableMediaQuery(query);

			if (isOverlay && view && setViewOptions) {
				self.setViewVariables(null, view);
			}
			else {
				if (view && setViewOptions) self.setViewOptions(view);
				if (view && setViewOptions) self.setViewVariables(view);
			}
		}
	}

	/**
	 * Show the view. Does not hide current views
	 */
	self.showView = function(view, setViewOptions) {
		var id = view ? view.id : null;
		var query = id ? self.mediaQueryDictionary[id] : null;
		var display = null;
		setViewOptions = setViewOptions==null ? true : setViewOptions;

		if (query) {
			self.enableMediaQuery(query);
			if (view==null) view =self.getVisibleView();
			if (view && setViewOptions) self.setViewOptions(view);
		}
		else if (id) {
			display = window.getComputedStyle(view).getPropertyValue("display");
			if (display=="" || display=="none") {
				view.style.display = "block";
			}
		}

		if (view) {
			if (self.currentView!=null) {
				self.lastView = self.currentView;
			}

			self.currentView = view;
		}
	}

	self.showViewById = function(id, setViewOptions) {
		var view = id ? self.getViewById(id) : null;

		if (view) {
			self.showView(view);
			return;
		}

		self.log("View not found '" + id + "'");
	}

	self.getElementView = function(element) {
		var view = element;
		var viewFound = false;

		while (viewFound==false || view==null) {
			if (view && self.viewsDictionary[view.id]) {
				return view;
			}
			view = view.parentNode;
		}
	}

	/**

	self.showOverlay = function(event, id, x, y) {
		var overlay = id && typeof id === 'string' ? self.getViewById(id) : id ? id : null;
		var query = overlay ? self.mediaQueryDictionary[overlay.id] : null;
		var centerHorizontally = false;
		var centerVertically = false;
		var anchorLeft = false;
		var anchorTop = false;
		var anchorRight = false;
		var anchorBottom = false;
		var display = null;
		var reparent = true;
		var view = null;

		if (overlay==null || overlay==false) {
			self.log("Overlay not found, '"+ id + "'");
			return;
		}

		// get enter animation - event target must have css variables declared
		if (event) {
			var button = event.currentTarget || event; // can be event or htmlelement
			var buttonComputedStyles = getComputedStyle(button);
			var actionTargetValue = buttonComputedStyles.getPropertyValue(self.prefix+"action-target").trim();
			var animation = buttonComputedStyles.getPropertyValue(self.prefix+"animation").trim();
			var isAnimated = animation!="";
			var targetType = buttonComputedStyles.getPropertyValue(self.prefix+"action-type").trim();
			var actionTarget = self.application ? null : self.getElement(actionTargetValue);
			var actionTargetStyles = actionTarget ? actionTarget.style : null;

			if (actionTargetStyles) {
				actionTargetStyles.setProperty("animation", animation);
			}

			if ("stopImmediatePropagation" in event) {
				event.stopImmediatePropagation();
			}
		}

		if (self.application==false || targetType=="page") {
			document.location.href = "./" + actionTargetValue;
			return;
		}

		// remove any current overlays
		if (self.currentOverlay) {

			// act as switch if same button
			if (self.currentOverlay==actionTarget || self.currentOverlay==null) {
				if (self.lastTrigger==button) {
					self.removeOverlay(isAnimated);
					return;
				}
			}
			else {
				self.removeOverlay(isAnimated);
			}
		}

		if (reparent) {
			view = self.getElementView(button);
			if (view) {
				view.appendChild(overlay);
			}
		}

		if (query) {
			//self.setElementAnimation(overlay, null);
			//overlay.style.animation = animation;
			self.enableMediaQuery(query);

			var display = overlay && overlay.style.display;

			if (overlay && display=="" || display=="none") {
				overlay.style.display = "block";
				//self.setViewOptions(overlay);
			}

			// add animation defined in event target style declaration
			if (animation && self.supportAnimations) {
				self.fadeIn(overlay, false, animation);
			}
		}
		else if (id) {

			display = window.getComputedStyle(overlay).getPropertyValue("display");

			if (display=="" || display=="none") {
				overlay.style.display = "block";
			}

			// add animation defined in event target style declaration
			if (animation && self.supportAnimations) {
				self.fadeIn(overlay, false, animation);
			}
		}

		// do not set x or y position if centering
		var horizontal = self.prefix + "center-horizontally";
		var vertical = self.prefix + "center-vertically";
		var style = overlay.style;
		var transform = [];

		centerHorizontally = self.getIsStyleDefined(id, horizontal) ? self.getViewPreferenceBoolean(overlay, horizontal) : false;
		centerVertically = self.getIsStyleDefined(id, vertical) ? self.getViewPreferenceBoolean(overlay, vertical) : false;
		anchorLeft = self.getIsStyleDefined(id, "left");
		anchorRight = self.getIsStyleDefined(id, "right");
		anchorTop = self.getIsStyleDefined(id, "top");
		anchorBottom = self.getIsStyleDefined(id, "bottom");


		if (self.viewsDictionary[overlay.id] && self.viewsDictionary[overlay.id].styleDeclaration) {
			style = self.viewsDictionary[overlay.id].styleDeclaration.style;
		}

		if (centerHorizontally) {
			style.left = "50%";
			style.transformOrigin = "0 0";
			transform.push("translateX(-50%)");
		}
		else if (anchorRight && anchorLeft) {
			style.left = x + "px";
		}
		else if (anchorRight) {
			//style.right = x + "px";
		}
		else {
			style.left = x + "px";
		}

		if (centerVertically) {
			style.top = "50%";
			transform.push("translateY(-50%)");
			style.transformOrigin = "0 0";
		}
		else if (anchorTop && anchorBottom) {
			style.top = y + "px";
		}
		else if (anchorBottom) {
			//style.bottom = y + "px";
		}
		else {
			style.top = y + "px";
		}

		if (transform.length) {
			style.transform = transform.join(" ");
		}

		self.currentOverlay = overlay;
		self.lastTrigger = button;
	}

	self.goBack = function() {
		if (self.currentOverlay) {
			self.removeOverlay();
		}
		else if (self.lastView) {
			self.goToView(self.lastView.id);
		}
	}

	self.removeOverlay = function(animate) {
		var overlay = self.currentOverlay;
		animate = animate===false ? false : true;

		if (overlay) {
			var style = overlay.style;

			if (style.animation && self.supportAnimations && animate) {
				self.reverseAnimation(overlay, true);

				var duration = self.getAnimationDuration(style.animation, true);

				setTimeout(function() {
					self.setElementAnimation(overlay, null);
					self.hideOverlay(overlay);
					self.currentOverlay = null;
				}, duration);
			}
			else {
				self.setElementAnimation(overlay, null);
				self.hideOverlay(overlay);
				self.currentOverlay = null;
			}
		}
	}

	self.reverseAnimation = function(target, hide) {
		var lastAnimation = null;
		var style = target.style;

		style.animationPlayState = "paused";
		lastAnimation = style.animation;
		style.animation = null;
		style.animationPlayState = "paused";

		if (hide) {
			//target.addEventListener("animationend", self.animationEndHideHandler);

			var duration = self.getAnimationDuration(lastAnimation, true);
			var isOverlay = self.isOverlay(target);

			setTimeout(function() {
				self.setElementAnimation(target, null);

				if (isOverlay) {
					self.hideOverlay(target);
				}
				else {
					self.hideView(target);
				}
			}, duration);
		}

		setTimeout(function() {
			style.animation = lastAnimation;
			style.animationPlayState = "paused";
			style.animationDirection = "reverse";
			style.animationPlayState = "running";
		}, 30);
	}

	self.animationEndHandler = function(event) {
		var target = event.currentTarget;
		self.dispatchEvent(new Event(event.type));
	}

	self.isOverlay = function(view) {
		var result = view ? self.getViewPreferenceBoolean(view, self.prefix + "is-overlay") : false;

		return result;
	}

	self.animationEndHideHandler = function(event) {
		var target = event.currentTarget;
		self.setViewVariables(null, target);
		self.hideView(target);
		target.removeEventListener("animationend", self.animationEndHideHandler);
	}

	self.animationEndShowHandler = function(event) {
		var target = event.currentTarget;
		target.removeEventListener("animationend", self.animationEndShowHandler);
	}

	self.setViewOptions = function(view) {

		if (view) {
			self.minimumScale = self.getViewPreferenceValue(view, self.prefix + "minimum-scale");
			self.maximumScale = self.getViewPreferenceValue(view, self.prefix + "maximum-scale");
			self.scaleViewsToFit = self.getViewPreferenceBoolean(view, self.prefix + "scale-to-fit");
			self.scaleToFitType = self.getViewPreferenceValue(view, self.prefix + "scale-to-fit-type");
			self.scaleToFitOnDoubleClick = self.getViewPreferenceBoolean(view, self.prefix + "scale-on-double-click");
			self.actualSizeOnDoubleClick = self.getViewPreferenceBoolean(view, self.prefix + "actual-size-on-double-click");
			self.scaleViewsOnResize = self.getViewPreferenceBoolean(view, self.prefix + "scale-on-resize");
			self.enableScaleUp = self.getViewPreferenceBoolean(view, self.prefix + "enable-scale-up");
			self.centerHorizontally = self.getViewPreferenceBoolean(view, self.prefix + "center-horizontally");
			self.centerVertically = self.getViewPreferenceBoolean(view, self.prefix + "center-vertically");
			self.navigationOnKeypress = self.getViewPreferenceBoolean(view, self.prefix + "navigate-on-keypress");
			self.showViewName = self.getViewPreferenceBoolean(view, self.prefix + "show-view-name");
			self.refreshPageForChanges = self.getViewPreferenceBoolean(view, self.prefix + "refresh-for-changes");
			self.refreshPageForChangesInterval = self.getViewPreferenceValue(view, self.prefix + "refresh-interval");
			self.showNavigationControls = self.getViewPreferenceBoolean(view, self.prefix + "show-navigation-controls");
			self.scaleViewSlider = self.getViewPreferenceBoolean(view, self.prefix + "show-scale-controls");
			self.enableDeepLinking = self.getViewPreferenceBoolean(view, self.prefix + "enable-deep-linking");
			self.singlePageApplication = self.getViewPreferenceBoolean(view, self.prefix + "application");
			self.showByMediaQuery = self.getViewPreferenceBoolean(view, self.prefix + "show-by-media-query");
			self.showUpdateNotification = document.cookie!="" ? document.cookie.indexOf(self.pageRefreshedName)!=-1 : false;
			self.imageComparisonDuration = self.getViewPreferenceValue(view, self.prefix + "image-comparison-duration");
			self.supportAnimations = self.getViewPreferenceBoolean(view, self.prefix + "enable-animations", true);

			if (self.scaleViewsToFit) {
				var newScaleValue = self.scaleViewToFit(view);

				if (newScaleValue<0) {
					setTimeout(self.scaleViewToFit, 500, view);
				}
			}
			else {
				self.viewScale = self.getViewScaleValue(view);
				self.viewToFitWidthScale = self.getViewFitToViewportWidthScale(view, self.enableScaleUp)
				self.viewToFitHeightScale = self.getViewFitToViewportScale(view, self.enableScaleUp);
				self.updateSliderValue(self.viewScale);
			}

			if (self.imageComparisonDuration!=null) {
				// todo
			}

			if (self.refreshPageForChangesInterval!=null) {
				self.refreshDuration = Number(self.refreshPageForChangesInterval);
			}
		}
	}

	self.previousView = function(event) {
		var rules = self.getStylesheetRules();
		var view = self.getVisibleView()
		var index = view ? self.getViewIndex(view) : -1;
		var prevQueryIndex = index!=-1 ? index-1 : self.currentQuery.index-1;
		var queryIndex = 0;
		var numberOfRules = rules!=null ? rules.length : 0;

		if (event) {
			event.stopImmediatePropagation();
		}

		if (prevQueryIndex<0) {
			return;
		}

		// loop through rules and hide media queries except selected
		for (var i=0;i<numberOfRules;i++) {
			var rule = rules[i];

			if (rule.media!=null) {

				if (queryIndex==prevQueryIndex) {
					self.currentQuery.mediaText = rule.conditionText;
					self.currentQuery.index = prevQueryIndex;
					self.currentQuery.rule = rule;
					self.enableMediaQuery(rule);
					self.updateViewLabel();
					self.updateURL();
					self.dispatchViewChange();
				}
				else {
					self.disableMediaQuery(rule);
				}

				queryIndex++;
			}
		}
	}

	self.nextView = function(event) {
		var rules = self.getStylesheetRules();
		var view = self.getVisibleView();
		var index = view ? self.getViewIndex(view) : -1;
		var nextQueryIndex = index!=-1 ? index+1 : self.currentQuery.index+1;
		var queryIndex = 0;
		var numberOfRules = rules!=null ? rules.length : 0;
		var numberOfMediaQueries = self.getNumberOfMediaRules();

		if (event) {
			event.stopImmediatePropagation();
		}

		if (nextQueryIndex>=numberOfMediaQueries) {
			return;
		}

		// loop through rules and hide media queries except selected
		for (var i=0;i<numberOfRules;i++) {
			var rule = rules[i];

			if (rule.media!=null) {

				if (queryIndex==nextQueryIndex) {
					self.currentQuery.mediaText = rule.conditionText;
					self.currentQuery.index = nextQueryIndex;
					self.currentQuery.rule = rule;
					self.enableMediaQuery(rule);
					self.updateViewLabel();
					self.updateURL();
					self.dispatchViewChange();
				}
				else {
					self.disableMediaQuery(rule);
				}

				queryIndex++;
			}
		}
	}

	/**
	 * Enables a view via media query
	 */
	self.enableMediaQuery = function(rule) {

		try {
			rule.media.mediaText = self.inclusionQuery;
		}
		catch(error) {
			//self.log(error);
			rule.conditionText = self.inclusionQuery;
		}
	}

	self.disableMediaQuery = function(rule) {

		try {
			rule.media.mediaText = self.exclusionQuery;
		}
		catch(error) {
			rule.conditionText = self.exclusionQuery;
		}
	}

	self.dispatchViewChange = function() {
		try {
			var event = new Event(self.NAVIGATION_CHANGE);
			window.dispatchEvent(event);
		}
		catch (error) {
			// In IE 11: Object doesn't support this action
		}
	}

	self.getNumberOfMediaRules = function() {
		var rules = self.getStylesheetRules();
		var numberOfRules = rules ? rules.length : 0;
		var numberOfQueries = 0;

		for (var i=0;i<numberOfRules;i++) {
			if (rules[i].media!=null) { numberOfQueries++; }
		}

		return numberOfQueries;
	}

	/////////////////////////////////////////
	// VIEW SCALE
	/////////////////////////////////////////

	self.sliderChangeHandler = function(event) {
		var value = self.getShortNumber(event.currentTarget.value/100);
		var view = self.getVisibleView();
		self.setViewScaleValue(view, false, value, true);
	}

	self.updateSliderValue = function(scale) {
		var slider = document.getElementById(self.viewScaleSliderId);
		var tooltip = parseInt(scale * 100 + "") + "%";
		var inputType;
		var inputValue;

		if (slider) {
			inputValue = self.getShortNumber(scale * 100);
			if (inputValue!=slider["value"]) {
				slider["value"] = inputValue;
			}
			inputType = slider.getAttributeNS(null, "type");

			if (inputType!="range") {
				// input range is not supported
				slider.style.display = "none";
			}

			self.setTooltip(slider, tooltip);
		}
	}

	self.viewChangeHandler = function(event) {
		var view = self.getVisibleView();
		var matrix = view ? getComputedStyle(view).transform : null;

		if (matrix) {
			self.viewScale = self.getViewScaleValue(view);

			var scaleNeededToFit = self.getViewFitToViewportScale(view);
			var isViewLargerThanViewport = scaleNeededToFit<1;

			// scale large view to fit if scale to fit is enabled
			if (self.scaleViewsToFit) {
				self.scaleViewToFit(view);
			}
			else {
				self.updateSliderValue(self.viewScale);
			}
		}
	}

	self.getViewScaleValue = function(view) {
		var matrix = getComputedStyle(view).transform;

		if (matrix) {
			var matrixArray = matrix.replace("matrix(", "").split(",");
			var scaleX = parseFloat(matrixArray[0]);
			var scaleY = parseFloat(matrixArray[3]);
			var scale = Math.min(scaleX, scaleY);
		}

		return scale;
	}

	self.setViewScaleValue = function(view, scaleToFit, desiredScale, isSliderChange) {
		var enableScaleUp = self.enableScaleUp;
		var scaleToFitType = self.scaleToFitType;
		var minimumScale = self.minimumScale;
		var maximumScale = self.maximumScale;
		var hasMinimumScale = !isNaN(minimumScale) && minimumScale!="";
		var hasMaximumScale = !isNaN(maximumScale) && maximumScale!="";
		var scaleNeededToFit = self.getViewFitToViewportScale(view, enableScaleUp);
		var scaleNeededToFitWidth = self.getViewFitToViewportWidthScale(view, enableScaleUp);
		var scaleNeededToFitHeight = self.getViewFitToViewportHeightScale(view, enableScaleUp);
		var scaleToFitFull = self.getViewFitToViewportScale(view, true);
		var scaleToFitFullWidth = self.getViewFitToViewportWidthScale(view, true);
		var scaleToFitFullHeight = self.getViewFitToViewportHeightScale(view, true);
		var scaleToWidth = scaleToFitType=="width";
		var scaleToHeight = scaleToFitType=="height";
		var shrunkToFit = false;
		var topPosition = null;
		var leftPosition = null;
		var translateY = null;
		var translateX = null;
		var transformValue = "";
		var canCenterVertically = true;
		var canCenterHorizontally = true;
		var style = view.style;

		if (view && self.viewsDictionary[view.id] && self.viewsDictionary[view.id].styleDeclaration) {
			style = self.viewsDictionary[view.id].styleDeclaration.style;
		}

		if (scaleToFit && isSliderChange!=true) {
			if (scaleToFitType=="fit" || scaleToFitType=="") {
				desiredScale = scaleNeededToFit;
			}
			else if (scaleToFitType=="width") {
				desiredScale = scaleNeededToFitWidth;
			}
			else if (scaleToFitType=="height") {
				desiredScale = scaleNeededToFitHeight;
			}
		}
		else {
			if (isNaN(desiredScale)) {
				desiredScale = 1;
			}
		}

		self.updateSliderValue(desiredScale);

		// scale to fit width
		if (scaleToWidth && scaleToHeight==false) {
			canCenterVertically = scaleNeededToFitHeight>=scaleNeededToFitWidth;
			canCenterHorizontally = scaleNeededToFitWidth>=1 && enableScaleUp==false;

			if (isSliderChange) {
				canCenterHorizontally = desiredScale<scaleToFitFullWidth;
			}
			else if (scaleToFit) {
				desiredScale = scaleNeededToFitWidth;
			}

			if (hasMinimumScale) {
				desiredScale = Math.max(desiredScale, Number(minimumScale));
			}

			if (hasMaximumScale) {
				desiredScale = Math.min(desiredScale, Number(maximumScale));
			}

			desiredScale = self.getShortNumber(desiredScale);

			canCenterHorizontally = self.canCenterHorizontally(view, "width", enableScaleUp, desiredScale, minimumScale, maximumScale);
			canCenterVertically = self.canCenterVertically(view, "width", enableScaleUp, desiredScale, minimumScale, maximumScale);

			if (desiredScale>1 && (enableScaleUp || isSliderChange)) {
				transformValue = "scale(" + desiredScale + ")";
			}
			else if (desiredScale>=1 && enableScaleUp==false) {
				transformValue = "scale(" + 1 + ")";
			}
			else {
				transformValue = "scale(" + desiredScale + ")";
			}

			if (self.centerVertically) {
				if (canCenterVertically) {
					translateY = "-50%";
					topPosition = "50%";
				}
				else {
					translateY = "0";
					topPosition = "0";
				}

				if (style.top != topPosition) {
					style.top = topPosition + "";
				}

				if (canCenterVertically) {
					transformValue += " translateY(" + translateY+ ")";
				}
			}

			if (self.centerHorizontally) {
				if (canCenterHorizontally) {
					translateX = "-50%";
					leftPosition = "50%";
				}
				else {
					translateX = "0";
					leftPosition = "0";
				}

				if (style.left != leftPosition) {
					style.left = leftPosition + "";
				}

				if (canCenterHorizontally) {
					transformValue += " translateX(" + translateX+ ")";
				}
			}

			style.transformOrigin = "0 0";
			style.transform = transformValue;

			self.viewScale = desiredScale;
			self.viewToFitWidthScale = scaleNeededToFitWidth;
			self.viewToFitHeightScale = scaleNeededToFitHeight;
			self.viewLeft = leftPosition;
			self.viewTop = topPosition;

			return desiredScale;
		}

		// scale to fit height
		if (scaleToHeight && scaleToWidth==false) {
			//canCenterVertically = scaleNeededToFitHeight>=scaleNeededToFitWidth;
			//canCenterHorizontally = scaleNeededToFitHeight<=scaleNeededToFitWidth && enableScaleUp==false;
			canCenterVertically = scaleNeededToFitHeight>=scaleNeededToFitWidth;
			canCenterHorizontally = scaleNeededToFitWidth>=1 && enableScaleUp==false;

			if (isSliderChange) {
				canCenterHorizontally = desiredScale<scaleToFitFullHeight;
			}
			else if (scaleToFit) {
				desiredScale = scaleNeededToFitHeight;
			}

			if (hasMinimumScale) {
				desiredScale = Math.max(desiredScale, Number(minimumScale));
			}

			if (hasMaximumScale) {
				desiredScale = Math.min(desiredScale, Number(maximumScale));
				//canCenterVertically = desiredScale>=scaleNeededToFitHeight && enableScaleUp==false;
			}

			desiredScale = self.getShortNumber(desiredScale);

			canCenterHorizontally = self.canCenterHorizontally(view, "height", enableScaleUp, desiredScale, minimumScale, maximumScale);
			canCenterVertically = self.canCenterVertically(view, "height", enableScaleUp, desiredScale, minimumScale, maximumScale);

			if (desiredScale>1 && (enableScaleUp || isSliderChange)) {
				transformValue = "scale(" + desiredScale + ")";
			}
			else if (desiredScale>=1 && enableScaleUp==false) {
				transformValue = "scale(" + 1 + ")";
			}
			else {
				transformValue = "scale(" + desiredScale + ")";
			}

			if (self.centerHorizontally) {
				if (canCenterHorizontally) {
					translateX = "-50%";
					leftPosition = "50%";
				}
				else {
					translateX = "0";
					leftPosition = "0";
				}

				if (style.left != leftPosition) {
					style.left = leftPosition + "";
				}

				if (canCenterHorizontally) {
					transformValue += " translateX(" + translateX+ ")";
				}
			}

			if (self.centerVertically) {
				if (canCenterVertically) {
					translateY = "-50%";
					topPosition = "50%";
				}
				else {
					translateY = "0";
					topPosition = "0";
				}

				if (style.top != topPosition) {
					style.top = topPosition + "";
				}

				if (canCenterVertically) {
					transformValue += " translateY(" + translateY+ ")";
				}
			}

			style.transformOrigin = "0 0";
			style.transform = transformValue;

			self.viewScale = desiredScale;
			self.viewToFitWidthScale = scaleNeededToFitWidth;
			self.viewToFitHeightScale = scaleNeededToFitHeight;
			self.viewLeft = leftPosition;
			self.viewTop = topPosition;

			return scaleNeededToFitHeight;
		}

		if (scaleToFitType=="fit") {
			//canCenterVertically = scaleNeededToFitHeight>=scaleNeededToFitWidth;
			//canCenterHorizontally = scaleNeededToFitWidth>=scaleNeededToFitHeight;
			canCenterVertically = scaleNeededToFitHeight>=scaleNeededToFit;
			canCenterHorizontally = scaleNeededToFitWidth>=scaleNeededToFit;

			if (hasMinimumScale) {
				desiredScale = Math.max(desiredScale, Number(minimumScale));
			}

			desiredScale = self.getShortNumber(desiredScale);

			if (isSliderChange || scaleToFit==false) {
				canCenterVertically = scaleToFitFullHeight>=desiredScale;
				canCenterHorizontally = desiredScale<scaleToFitFullWidth;
			}
			else if (scaleToFit) {
				desiredScale = scaleNeededToFit;
			}

			transformValue = "scale(" + desiredScale + ")";

			//canCenterHorizontally = self.canCenterHorizontally(view, "fit", false, desiredScale);
			//canCenterVertically = self.canCenterVertically(view, "fit", false, desiredScale);

			if (self.centerVertically) {
				if (canCenterVertically) {
					translateY = "-50%";
					topPosition = "50%";
				}
				else {
					translateY = "0";
					topPosition = "0";
				}

				if (style.top != topPosition) {
					style.top = topPosition + "";
				}

				if (canCenterVertically) {
					transformValue += " translateY(" + translateY+ ")";
				}
			}

			if (self.centerHorizontally) {
				if (canCenterHorizontally) {
					translateX = "-50%";
					leftPosition = "50%";
				}
				else {
					translateX = "0";
					leftPosition = "0";
				}

				if (style.left != leftPosition) {
					style.left = leftPosition + "";
				}

				if (canCenterHorizontally) {
					transformValue += " translateX(" + translateX+ ")";
				}
			}

			style.transformOrigin = "0 0";
			style.transform = transformValue;

			self.viewScale = desiredScale;
			self.viewToFitWidthScale = scaleNeededToFitWidth;
			self.viewToFitHeightScale = scaleNeededToFitHeight;
			self.viewLeft = leftPosition;
			self.viewTop = topPosition;

			self.updateSliderValue(desiredScale);

			return desiredScale;
		}

		if (scaleToFitType=="default" || scaleToFitType=="") {
			desiredScale = 1;

			if (hasMinimumScale) {
				desiredScale = Math.max(desiredScale, Number(minimumScale));
			}
			if (hasMaximumScale) {
				desiredScale = Math.min(desiredScale, Number(maximumScale));
			}

			canCenterHorizontally = self.canCenterHorizontally(view, "none", false, desiredScale, minimumScale, maximumScale);
			canCenterVertically = self.canCenterVertically(view, "none", false, desiredScale, minimumScale, maximumScale);

			if (self.centerVertically) {
				if (canCenterVertically) {
					translateY = "-50%";
					topPosition = "50%";
				}
				else {
					translateY = "0";
					topPosition = "0";
				}

				if (style.top != topPosition) {
					style.top = topPosition + "";
				}

				if (canCenterVertically) {
					transformValue += " translateY(" + translateY+ ")";
				}
			}

			if (self.centerHorizontally) {
				if (canCenterHorizontally) {
					translateX = "-50%";
					leftPosition = "50%";
				}
				else {
					translateX = "0";
					leftPosition = "0";
				}

				if (style.left != leftPosition) {
					style.left = leftPosition + "";
				}

				if (canCenterHorizontally) {
					transformValue += " translateX(" + translateX+ ")";
				}
				else {
					transformValue += " translateX(" + 0 + ")";
				}
			}

			style.transformOrigin = "0 0";
			style.transform = transformValue;


			self.viewScale = desiredScale;
			self.viewToFitWidthScale = scaleNeededToFitWidth;
			self.viewToFitHeightScale = scaleNeededToFitHeight;
			self.viewLeft = leftPosition;
			self.viewTop = topPosition;

			self.updateSliderValue(desiredScale);

			return desiredScale;
		}
	}

	self.canCenterHorizontally = function(view, type, scaleUp, scale, minimumScale, maximumScale) {
		var scaleNeededToFit = self.getViewFitToViewportScale(view, scaleUp);
		var scaleNeededToFitHeight = self.getViewFitToViewportHeightScale(view, scaleUp);
		var scaleNeededToFitWidth = self.getViewFitToViewportWidthScale(view, scaleUp);
		var canCenter = false;
		var minScale;

		type = type==null ? "none" : type;
		scale = scale==null ? scale : scaleNeededToFitWidth;
		scaleUp = scaleUp == null ? false : scaleUp;

		if (type=="width") {

			if (scaleUp && maximumScale==null) {
				canCenter = false;
			}
			else if (scaleNeededToFitWidth>=1) {
				canCenter = true;
			}
		}
		else if (type=="height") {
			minScale = Math.min(1, scaleNeededToFitHeight);
			if (minimumScale!="" && maximumScale!="") {
				minScale = Math.max(minimumScale, Math.min(maximumScale, scaleNeededToFitHeight));
			}
			else {
				if (minimumScale!="") {
					minScale = Math.max(minimumScale, scaleNeededToFitHeight);
				}
				if (maximumScale!="") {
					minScale = Math.max(minimumScale, Math.min(maximumScale, scaleNeededToFitHeight));
				}
			}

			if (scaleUp && maximumScale=="") {
				canCenter = false;
			}
			else if (scaleNeededToFitWidth>=minScale) {
				canCenter = true;
			}
		}
		else if (type=="fit") {
			canCenter = scaleNeededToFitWidth>=scaleNeededToFit;
		}
		else {
			if (scaleUp) {
				canCenter = false;
			}
			else if (scaleNeededToFitWidth>=1) {
				canCenter = true;
			}
		}

		self.horizontalScrollbarsNeeded = canCenter;

		return canCenter;
	}

	self.canCenterVertically = function(view, type, scaleUp, scale, minimumScale, maximumScale) {
		var scaleNeededToFit = self.getViewFitToViewportScale(view, scaleUp);
		var scaleNeededToFitWidth = self.getViewFitToViewportWidthScale(view, scaleUp);
		var scaleNeededToFitHeight = self.getViewFitToViewportHeightScale(view, scaleUp);
		var canCenter = false;
		var minScale;

		type = type==null ? "none" : type;
		scale = scale==null ? 1 : scale;
		scaleUp = scaleUp == null ? false : scaleUp;

		if (type=="width") {
			canCenter = scaleNeededToFitHeight>=scaleNeededToFitWidth;
		}
		else if (type=="height") {
			minScale = Math.max(minimumScale, Math.min(maximumScale, scaleNeededToFit));
			canCenter = scaleNeededToFitHeight>=minScale;
		}
		else if (type=="fit") {
			canCenter = scaleNeededToFitHeight>=scaleNeededToFit;
		}
		else {
			if (scaleUp) {
				canCenter = false;
			}
			else if (scaleNeededToFitHeight>=1) {
				canCenter = true;
			}
		}

		self.verticalScrollbarsNeeded = canCenter;

		return canCenter;
	}

	self.getViewFitToViewportScale = function(view, scaleUp) {
		var enableScaleUp = scaleUp;
		var availableWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
		var availableHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
		var elementWidth = parseFloat(getComputedStyle(view, "style").width);
		var elementHeight = parseFloat(getComputedStyle(view, "style").height);
		var newScale = 1;

		// if element is not added to the document computed values are NaN
		if (isNaN(elementWidth) || isNaN(elementHeight)) {
			return newScale;
		}

		availableWidth -= self.horizontalPadding;
		availableHeight -= self.verticalPadding;

		if (enableScaleUp) {
			newScale = Math.min(availableHeight/elementHeight, availableWidth/elementWidth);
		}
		else if (elementWidth > availableWidth || elementHeight > availableHeight) {
			newScale = Math.min(availableHeight/elementHeight, availableWidth/elementWidth);
		}

		return newScale;
	}

	self.getViewFitToViewportWidthScale = function(view, scaleUp) {
		// need to get browser viewport width when element
		var isParentWindow = view && view.parentNode && view.parentNode===document.body;
		var enableScaleUp = scaleUp;
		var availableWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
		var elementWidth = parseFloat(getComputedStyle(view, "style").width);
		var newScale = 1;

		// if element is not added to the document computed values are NaN
		if (isNaN(elementWidth)) {
			return newScale;
		}

		availableWidth -= self.horizontalPadding;

		if (enableScaleUp) {
			newScale = availableWidth/elementWidth;
		}
		else if (elementWidth > availableWidth) {
			newScale = availableWidth/elementWidth;
		}

		return newScale;
	}

	self.getViewFitToViewportHeightScale = function(view, scaleUp) {
		var enableScaleUp = scaleUp;
		var availableHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
		var elementHeight = parseFloat(getComputedStyle(view, "style").height);
		var newScale = 1;

		// if element is not added to the document computed values are NaN
		if (isNaN(elementHeight)) {
			return newScale;
		}

		availableHeight -= self.verticalPadding;

		if (enableScaleUp) {
			newScale = availableHeight/elementHeight;
		}
		else if (elementHeight > availableHeight) {
			newScale = availableHeight/elementHeight;
		}

		return newScale;
	}

	self.keypressHandler = function(event) {
		var rightKey = 39;
		var leftKey = 37;

		// listen for both events
		if (event.type=="keypress") {
			window.removeEventListener("keyup", self.keypressHandler);
		}
		else {
			window.removeEventListener("keypress", self.keypressHandler);
		}

		if (self.showNavigationControls) {
			if (self.navigationOnKeypress) {
				if (event.keyCode==rightKey) {
					self.nextView();
				}
				if (event.keyCode==leftKey) {
					self.previousView();
				}
			}
		}
		else if (self.navigationOnKeypress) {
			if (event.keyCode==rightKey) {
				self.nextView();
			}
			if (event.keyCode==leftKey) {
				self.previousView();
			}
		}
	}

	///////////////////////////////////
	// GENERAL FUNCTIONS
	///////////////////////////////////

	self.getViewById = function(id) {
		id = id ? id.replace("#", "") : "";
		var view = self.viewIds.indexOf(id)!=-1 && self.getElement(id);
		return view;
	}

	self.getViewIds = function() {
		var viewIds = self.getViewPreferenceValue(document.body, self.prefix + "view-ids");
		var viewId = null;

		viewIds = viewIds!=null && viewIds!="" ? viewIds.split(",") : [];

		if (viewIds.length==0) {
			viewId = self.getViewPreferenceValue(document.body, self.prefix + "view-id");
			viewIds = viewId ? [viewId] : [];
		}

		return viewIds;
	}

	self.getInitialViewId = function() {
		var viewId = self.getViewPreferenceValue(document.body, self.prefix + "view-id");
		return viewId;
	}

	self.getApplicationStylesheet = function() {
		var stylesheetId = self.getViewPreferenceValue(document.body, self.prefix + "stylesheet-id");
		self.applicationStylesheet = document.getElementById("applicationStylesheet");
		return self.applicationStylesheet.sheet;
	}

	self.getVisibleView = function() {
		var viewIds = self.getViewIds();

		for (var i=0;i<viewIds.length;i++) {
			var viewId = viewIds[i].replace(/[\#?\.?](.*)/, "$" + "1");
			var view = self.getElement(viewId);
			var postName = "_Class";

			if (view==null && viewId && viewId.lastIndexOf(postName)!=-1) {
				view = self.getElement(viewId.replace(postName, ""));
			}

			if (view) {
				var display = getComputedStyle(view).display;

				if (display=="block" || display=="flex") {
					return view;
				}
			}
		}

		return null;
	}

	self.getVisibleViews = function() {
		var viewIds = self.getViewIds();
		var views = [];

		for (var i=0;i<viewIds.length;i++) {
			var viewId = viewIds[i].replace(/[\#?\.?](.*)/, "$" + "1");
			var view = self.getElement(viewId);
			var postName = "_Class";

			if (view==null && viewId && viewId.lastIndexOf(postName)!=-1) {
				view = self.getElement(viewId.replace(postName, ""));
			}

			if (view) {
				var display = getComputedStyle(view).display;

				if (display=="none") {
					continue;
				}

				if (display=="block" || display=="flex") {
					views.push(view);
				}
			}
		}

		return views;
	}

	self.getStateNameByViewId = function(id) {
		var state = self.viewsDictionary[id];
		return state && state.stateName;
	}

	self.getMatchingViews = function(ids) {
		var views = self.addedViews.slice(0);
		var matchingViews = [];

		if (self.showByMediaQuery) {
			for (let index = 0; index < views.length; index++) {
				var viewId = views[index];
				var state = self.viewsDictionary[viewId];
				var rule = state && state.rule;
				var matchResults = window.matchMedia(rule.conditionText);
				var view = self.views[viewId];

				if (matchResults.matches) {
					if (ids==true) {
						matchingViews.push(viewId);
					}
					else {
						matchingViews.push(view);
					}
				}
			}
		}

		return matchingViews;
	}

	self.ruleMatchesQuery = function(rule) {
		var result = window.matchMedia(rule.conditionText);
		return result.matches;
	}

	self.getViewsByStateName = function(stateName, matchQuery) {
		var views = self.addedViews.slice(0);
		var matchingViews = [];

		if (self.showByMediaQuery) {

			// find state name
			for (let index = 0; index < views.length; index++) {
				var viewId = views[index];
				var state = self.viewsDictionary[viewId];
				var rule = state.rule;
				var mediaRule = state.mediaRule;
				var view = self.views[viewId];
				var viewStateName = self.getStyleRuleValue(mediaRule, self.STATE_NAME, state);
				var stateFoundAtt = view.getAttribute(self.STATE_NAME)==state;
				var matchesResults = false;

				if (viewStateName==stateName) {
					if (matchQuery) {
						matchesResults = self.ruleMatchesQuery(rule);

						if (matchesResults) {
							matchingViews.push(view);
						}
					}
					else {
						matchingViews.push(view);
					}
				}
			}
		}

		return matchingViews;
	}

	self.getInitialView = function() {
		var viewId = self.getInitialViewId();
		viewId = viewId.replace(/[\#?\.?](.*)/, "$" + "1");
		var view = self.getElement(viewId);
		var postName = "_Class";

		if (view==null && viewId && viewId.lastIndexOf(postName)!=-1) {
			view = self.getElement(viewId.replace(postName, ""));
		}

		return view;
	}

	self.getViewIndex = function(view) {
		var viewIds = self.getViewIds();
		var id = view ? view.id : null;
		var index = id && viewIds ? viewIds.indexOf(id) : -1;

		return index;
	}

	self.syncronizeViewToURL = function() {
		var fragment = self.getHashFragment();

		if (self.showByMediaQuery) {
			var stateName = fragment;

			if (stateName==null || stateName=="") {
				var initialView = self.getInitialView();
				stateName = initialView ? self.getStateNameByViewId(initialView.id) : null;
			}

			self.showMediaQueryViewsByState(stateName);
			return;
		}

		var view = self.getViewById(fragment);
		var index = view ? self.getViewIndex(view) : 0;
		if (index==-1) index = 0;
		var currentView = self.hideViews(index);

		if (self.supportsPopState && currentView) {

			if (fragment==null) {
				window.history.replaceState({name:currentView.id}, null, "#"+ currentView.id);
			}
			else {
				window.history.pushState({name:currentView.id}, null, "#"+ currentView.id);
			}
		}

		self.setViewVariables(view);
		return view;
	}

	/**
	 * Set the currentView or currentOverlay properties and set the lastView or lastOverlay properties
	 */
	self.setViewVariables = function(view, overlay, parentView) {
		if (view) {
			if (self.currentView) {
				self.lastView = self.currentView;
			}
			self.currentView = view;
		}

		if (overlay) {
			if (self.currentOverlay) {
				self.lastOverlay = self.currentOverlay;
			}
			self.currentOverlay = overlay;
		}
	}

	self.getViewPreferenceBoolean = function(view, property, altValue) {
		var computedStyle = window.getComputedStyle(view);
		var value = computedStyle.getPropertyValue(property);
		var type = typeof value;

		if (value=="true" || (type=="string" && value.indexOf("true")!=-1)) {
			return true;
		}
		else if (value=="" && arguments.length==3) {
			return altValue;
		}

		return false;
	}

	self.getViewPreferenceValue = function(view, property, defaultValue) {
		var value = window.getComputedStyle(view).getPropertyValue(property);

		if (value===undefined) {
			return defaultValue;
		}

		value = value.replace(/^[\s\"]*/, "");
		value = value.replace(/[\s\"]*$/, "");
		value = value.replace(/^[\s"]*(.*?)[\s"]*$/, function (match, capture) {
			return capture;
		});

		return value;
	}

	self.getStyleRuleValue = function(cssRule, property) {
		var value = cssRule ? cssRule.style.getPropertyValue(property) : null;

		if (value===undefined) {
			return null;
		}

		value = value.replace(/^[\s\"]*/, "");
		value = value.replace(/[\s\"]*$/, "");
		value = value.replace(/^[\s"]*(.*?)[\s"]*$/, function (match, capture) {
			return capture;
		});

		return value;
	}


	self.getCSSPropertyValueForElement = function(id, property) {
		var styleSheets = document.styleSheets;
		var numOfStylesheets = styleSheets.length;
		var values = [];
		var selectorIDText = "#" + id;
		var selectorClassText = "." + id + "_Class";
		var value;

		for(var i=0;i<numOfStylesheets;i++) {
			var styleSheet = styleSheets[i];
			var cssRules = self.getStylesheetRules(styleSheet);
			var numOfCSSRules = cssRules.length;
			var cssRule;

			for (var j=0;j<numOfCSSRules;j++) {
				cssRule = cssRules[j];

				if (cssRule.media) {
					var mediaRules = cssRule.cssRules;
					var numOfMediaRules = mediaRules ? mediaRules.length : 0;

					for(var k=0;k<numOfMediaRules;k++) {
						var mediaRule = mediaRules[k];

						if (mediaRule.selectorText==selectorIDText || mediaRule.selectorText==selectorClassText) {

							if (mediaRule.style && mediaRule.style.getPropertyValue(property)!="") {
								value = mediaRule.style.getPropertyValue(property);
								values.push(value);
							}
						}
					}
				}
				else {

					if (cssRule.selectorText==selectorIDText || cssRule.selectorText==selectorClassText) {
						if (cssRule.style && cssRule.style.getPropertyValue(property)!="") {
							value = cssRule.style.getPropertyValue(property);
							values.push(value);
						}
					}
				}
			}
		}

		return values.pop();
	}

	self.getIsStyleDefined = function(id, property) {
		var value = self.getCSSPropertyValueForElement(id, property);
		return value!==undefined && value!="";
	}

	self.collectViews = function() {
		var viewIds = self.getViewIds();

		for (let index = 0; index < viewIds.length; index++) {
			const id = viewIds[index];
			const view = self.getElement(id);
			self.views[id] = view;
		}

		self.viewIds = viewIds;
	}

	self.collectOverlays = function() {
		var viewIds = self.getViewIds();
		var ids = [];

		for (let index = 0; index < viewIds.length; index++) {
			const id = viewIds[index];
			const view = self.getViewById(id);
			const isOverlay = view && self.isOverlay(view);

			if (isOverlay) {
				ids.push(id);
				self.overlays[id] = view;
			}
		}

		self.overlayIds = ids;
	}

	self.collectMediaQueries = function() {
		var viewIds = self.getViewIds();
		var styleSheet = self.getApplicationStylesheet();
		var cssRules = self.getStylesheetRules(styleSheet);
		var numOfCSSRules = cssRules ? cssRules.length : 0;
		var cssRule;
		var id = viewIds.length ? viewIds[0]: ""; // single view
		var selectorIDText = "#" + id;
		var selectorClassText = "." + id + "_Class";
		var viewsNotFound = viewIds.slice();
		var viewsFound = [];
		var selectorText = null;
		var property = self.prefix + "view-id";
		var stateName = self.prefix + "state";
		var stateValue;

		for (var j=0;j<numOfCSSRules;j++) {
			cssRule = cssRules[j];

			if (cssRule.media) {
				var mediaRules = cssRule.cssRules;
				var numOfMediaRules = mediaRules ? mediaRules.length : 0;
				var mediaViewInfoFound = false;
				var mediaId = null;

				for(var k=0;k<numOfMediaRules;k++) {
					var mediaRule = mediaRules[k];

					selectorText = mediaRule.selectorText;

					if (selectorText==".mediaViewInfo" && mediaViewInfoFound==false) {

						mediaId = self.getStyleRuleValue(mediaRule, property);
						stateValue = self.getStyleRuleValue(mediaRule, stateName);

						selectorIDText = "#" + mediaId;
						selectorClassText = "." + mediaId + "_Class";

						// prevent duplicates from load and domcontentloaded events
						if (self.addedViews.indexOf(mediaId)==-1) {
							self.addView(mediaId, cssRule, mediaRule, stateValue);
						}

						viewsFound.push(mediaId);

						if (viewsNotFound.indexOf(mediaId)!=-1) {
							viewsNotFound.splice(viewsNotFound.indexOf(mediaId));
						}

						mediaViewInfoFound = true;
					}

					if (selectorIDText==selectorText || selectorClassText==selectorText) {
						var styleObject = self.viewsDictionary[mediaId];
						if (styleObject) {
							styleObject.styleDeclaration = mediaRule;
						}
						break;
					}
				}
			}
			else {
				selectorText = cssRule.selectorText;

				if (selectorText==null) continue;

				selectorText = selectorText.replace(/[#|\s|*]?/g, "");

				if (viewIds.indexOf(selectorText)!=-1) {
					self.addView(selectorText, cssRule, null, stateValue);

					if (viewsNotFound.indexOf(selectorText)!=-1) {
						viewsNotFound.splice(viewsNotFound.indexOf(selectorText));
					}

					break;
				}
			}
		}

		if (viewsNotFound.length) {
			console.log("Could not find the following views:" + viewsNotFound.join(",") + "");
			console.log("Views found:" + viewsFound.join(",") + "");
		}
	}

	/**
	 * Adds a view. A view object contains the id of the view and the style rule
	 * Use enableMediaQuery(rule) to enable
	 * An array of view names are in self.addedViews array
	 */
	self.addView = function(viewId, cssRule, mediaRule, stateName) {
		var state = {name:viewId, rule:cssRule, id:viewId, mediaRule:mediaRule, stateName:stateName};
		self.addedViews.push(viewId);
		self.viewsDictionary[viewId] = state;
		self.mediaQueryDictionary[viewId] = cssRule;
	}

	self.hasView = function(name) {

		if (self.addedViews.indexOf(name)!=-1) {
			return true;
		}
		return false;
	}

	/**
	 
	 */
	self.goToView = function(id, maintainPreviousState, parent) {
		var state = self.viewsDictionary[id];

		if (state) {
			if (maintainPreviousState==false || maintainPreviousState==null) {
				self.hideViews();
			}
			self.enableMediaQuery(state.rule);
			self.updateViewLabel();
			self.updateURL();
		}
		else {
			var event = new Event(self.STATE_NOT_FOUND);
			self.stateName = id;
			window.dispatchEvent(event);
		}
	}

	/**
	 * Go to the view in the event targets CSS variable
	 */
	self.goToTargetView = function(event) {
		var button = event.currentTarget;
		var buttonComputedStyles = getComputedStyle(button);
		var actionTargetValue = buttonComputedStyles.getPropertyValue(self.prefix+"action-target").trim();
		var animation = buttonComputedStyles.getPropertyValue(self.prefix+"animation").trim();
		var targetType = buttonComputedStyles.getPropertyValue(self.prefix+"action-type").trim();
		var targetView = self.application ? null : self.getElement(actionTargetValue);
		var targetState = targetView ? self.getStateNameByViewId(targetView.id) : null;
		var actionTargetStyles = targetView ? targetView.style : null;
		var state = self.viewsDictionary[actionTargetValue];

		// navigate to page
		if (self.application==false || targetType=="page") {
			document.location.href = "./" + actionTargetValue;
			return;
		}

		// if view is found
		if (targetView) {

			if (self.currentOverlay) {
				self.removeOverlay(false);
			}

			if (self.showByMediaQuery) {
				var stateName = targetState;

				if (stateName==null || stateName=="") {
					var initialView = self.getInitialView();
					stateName = initialView ? self.getStateNameByViewId(initialView.id) : null;
				}
				self.showMediaQueryViewsByState(stateName, event);
				return;
			}

			// add animation set in event target style declaration
			if (animation && self.supportAnimations) {
				self.crossFade(self.currentView, targetView, false, animation);
			}
			else {
				self.setViewVariables(self.currentView);
				self.hideViews();
				self.enableMediaQuery(state.rule);
				self.scaleViewIfNeeded(targetView);
				self.centerView(targetView);
				self.updateViewLabel();
				self.updateURL();
			}
		}
		else {
			var stateEvent = new Event(self.STATE_NOT_FOUND);
			self.stateName = name;
			window.dispatchEvent(stateEvent);
		}

		event.stopImmediatePropagation();
	}

	/**
	 * Cross fade between views
	 **/
	self.crossFade = function(from, to, update, animation) {
		var targetIndex = to.parentNode
		var fromIndex = Array.prototype.slice.call(from.parentElement.children).indexOf(from);
		var toIndex = Array.prototype.slice.call(to.parentElement.children).indexOf(to);

		if (from.parentNode==to.parentNode) {
			var reverse = self.getReverseAnimation(animation);
			var duration = self.getAnimationDuration(animation, true);

			// if target view is above (higher index)
			// then fade in target view
			// and after fade in then hide previous view instantly
			if (fromIndex<toIndex) {
				self.setElementAnimation(from, null);
				self.setElementAnimation(to, null);
				self.showViewByMediaQuery(to);
				self.fadeIn(to, update, animation);

				setTimeout(function() {
					self.setElementAnimation(to, null);
					self.setElementAnimation(from, null);
					self.hideView(from);
					self.updateURL();
					self.setViewVariables(to);
					self.updateViewLabel();
				}, duration)
			}
			// if target view is on bottom
			// then show target view instantly
			// and fade out current view
			else if (fromIndex>toIndex) {
				self.setElementAnimation(to, null);
				self.setElementAnimation(from, null);
				self.showViewByMediaQuery(to);
				self.fadeOut(from, update, reverse);

				setTimeout(function() {
					self.setElementAnimation(to, null);
					self.setElementAnimation(from, null);
					self.hideView(from);
					self.updateURL();
					self.setViewVariables(to);
				}, duration)
			}
		}
	}

	self.fadeIn = function(element, update, animation) {
		self.showViewByMediaQuery(element);

		if (update) {
			self.updateURL(element);

			element.addEventListener("animationend", function(event) {
				element.style.animation = null;
				self.setViewVariables(element);
				self.updateViewLabel();
				element.removeEventListener("animationend", arguments.callee);
			});
		}

		self.setElementAnimation(element, null);

		element.style.animation = animation;
	}

	self.fadeOutCurrentView = function(animation, update) {
		if (self.currentView) {
			self.fadeOut(self.currentView, update, animation);
		}
		if (self.currentOverlay) {
			self.fadeOut(self.currentOverlay, update, animation);
		}
	}

	self.fadeOut = function(element, update, animation) {
		if (update) {
			element.addEventListener("animationend", function(event) {
				element.style.animation = null;
				self.hideView(element);
				element.removeEventListener("animationend", arguments.callee);
			});
		}

		element.style.animationPlayState = "paused";
		element.style.animation = animation;
		element.style.animationPlayState = "running";
	}

	self.getReverseAnimation = function(animation) {
		if (animation && animation.indexOf("reverse")==-1) {
			animation += " reverse";
		}

		return animation;
	}


	self.getAnimationDuration = function(animation, inMilliseconds) {
		var duration = 0;
		var expression = /.+(\d\.\d)s.+/;

		if (animation && animation.match(expression)) {
			duration = parseFloat(animation.replace(expression, "$" + "1"));
			if (duration && inMilliseconds) duration = duration * 1000;
		}

		return duration;
	}

	self.setElementAnimation = function(element, animation, priority) {
		element.style.setProperty("animation", animation, "important");
	}

	self.getElement = function(id) {
		var elementId = id ? id.trim() : id;
		var element = elementId ? document.getElementById(elementId) : null;

		return element;
	}

	self.getElementByClass = function(className) {
		className = className ? className.trim() : className;
		var elements = document.getElementsByClassName(className);

		return elements.length ? elements[0] : null;
	}

	self.resizeHandler = function(event) {

		if (self.showByMediaQuery) {
			if (self.enableDeepLinking) {
				var stateName = self.getHashFragment();

				if (stateName==null || stateName=="") {
					var initialView = self.getInitialView();
					stateName = initialView ? self.getStateNameByViewId(initialView.id) : null;
				}
				self.showMediaQueryViewsByState(stateName, event);
			}
		}
		else {
			var visibleViews = self.getVisibleViews();

			for (let index = 0; index < visibleViews.length; index++) {
				var view = visibleViews[index];
				self.scaleViewIfNeeded(view);
			}
		}

		window.dispatchEvent(new Event(self.APPLICATION_RESIZE));
	}

	self.scaleViewIfNeeded = function(view) {

		if (self.scaleViewsOnResize) {
			if (view==null) {
				view = self.getVisibleView();
			}

			var isViewScaled = view.getAttributeNS(null, self.SIZE_STATE_NAME)=="false" ? false : true;

			if (isViewScaled) {
				self.scaleViewToFit(view, true);
			}
			else {
				self.scaleViewToActualSize(view);
			}
		}
		else if (view) {
			self.centerView(view);
		}
	}

	self.centerView = function(view) {

		if (self.scaleViewsToFit) {
			self.scaleViewToFit(view, true);
		}
		else {
			self.scaleViewToActualSize(view);  // for centering support for now
		}
	}

	self.preventDoubleClick = function(event) {
		event.stopImmediatePropagation();
	}

	self.getHashFragment = function() {
		var value = window.location.hash ? window.location.hash.replace("#", "") : "";
		return value;
	}

	self.showBlockElement = function(view) {
		view.style.display = "block";
	}

	self.hideElement = function(view) {
		view.style.display = "none";
	}

	self.showStateFunction = null;

	self.showMediaQueryViewsByState = function(state, event) {
		// browser will hide and show by media query (small, medium, large)
		// but if multiple views exists at same size user may want specific view
		// if showStateFunction is defined that is called with state fragment and user can show or hide each media matching view by returning true or false
		// if showStateFunction is not defined and state is defined and view has a defined state that matches then show that and hide other matching views
		// if no state is defined show view
		// an viewChanging event is dispatched before views are shown or hidden that can be prevented

		// get all matched queries
		// if state name is specified then show that view and hide other views
		// if no state name is defined then show
		var matchedViews = self.getMatchingViews();
		var matchMediaQuery = true;
		var foundViews = self.getViewsByStateName(state, matchMediaQuery);
		var showViews = [];
		var hideViews = [];

		// loop views that match media query
		for (let index = 0; index < matchedViews.length; index++) {
			var view = matchedViews[index];

			// let user determine visible view
			if (self.showStateFunction!=null) {
				if (self.showStateFunction(view, state)) {
					showViews.push(view);
				}
				else {
					hideViews.push(view);
				}
			}
			// state was defined so check if view matches state
			else if (foundViews.length) {

				if (foundViews.indexOf(view)!=-1) {
					showViews.push(view);
				}
				else {
					hideViews.push(view);
				}
			}
			// if no state names are defined show view (define unused state name to exclude)
			else if (state==null || state=="") {
				showViews.push(view);
			}
		}

		if (showViews.length) {
			var viewChangingEvent = new Event(self.VIEW_CHANGING);
			viewChangingEvent.showViews = showViews;
			viewChangingEvent.hideViews = hideViews;
			window.dispatchEvent(viewChangingEvent);

			if (viewChangingEvent.defaultPrevented==false) {
				for (var index = 0; index < hideViews.length; index++) {
					var view = hideViews[index];

					if (self.isOverlay(view)) {
						self.removeOverlay(view);
					}
					else {
						self.hideElement(view);
					}
				}

				for (var index = 0; index < showViews.length; index++) {
					var view = showViews[index];

					if (index==showViews.length-1) {
						self.clearDisplay(view);
						self.setViewOptions(view);
						self.setViewVariables(view);
						self.centerView(view);
						self.updateURLState(view, state);
					}
				}
			}

			var viewChangeEvent = new Event(self.VIEW_CHANGE);
			viewChangeEvent.showViews = showViews;
			viewChangeEvent.hideViews = hideViews;
			window.dispatchEvent(viewChangeEvent);
		}

	}

	self.clearDisplay = function(view) {
		view.style.setProperty("display", null);
	}

	self.hashChangeHandler = function(event) {
		var fragment = self.getHashFragment();
		var view = self.getViewById(fragment);

		if (self.showByMediaQuery) {
			var stateName = fragment;

			if (stateName==null || stateName=="") {
				var initialView = self.getInitialView();
				stateName = initialView ? self.getStateNameByViewId(initialView.id) : null;
			}
			self.showMediaQueryViewsByState(stateName);
		}
		else {
			if (view) {
				self.hideViews();
				self.showView(view);
				self.setViewVariables(view);
				self.updateViewLabel();

				window.dispatchEvent(new Event(self.VIEW_CHANGE));
			}
			else {
				window.dispatchEvent(new Event(self.VIEW_NOT_FOUND));
			}
		}
	}

	self.popStateHandler = function(event) {
		var state = event.state;
		var fragment = state ? state.name : window.location.hash;
		var view = self.getViewById(fragment);

		if (view) {
			self.hideViews();
			self.showView(view);
			self.updateViewLabel();
		}
		else {
			window.dispatchEvent(new Event(self.VIEW_NOT_FOUND));
		}
	}

	self.doubleClickHandler = function(event) {
		var view = self.getVisibleView();
		var scaleValue = view ? self.getViewScaleValue(view) : 1;
		var scaleNeededToFit = view ? self.getViewFitToViewportScale(view) : 1;
		var scaleNeededToFitWidth = view ? self.getViewFitToViewportWidthScale(view) : 1;
		var scaleNeededToFitHeight = view ? self.getViewFitToViewportHeightScale(view) : 1;
		var scaleToFitType = self.scaleToFitType;

		// Three scenarios
		// - scale to fit on double click
		// - set scale to actual size on double click
		// - switch between scale to fit and actual page size

		if (scaleToFitType=="width") {
			scaleNeededToFit = scaleNeededToFitWidth;
		}
		else if (scaleToFitType=="height") {
			scaleNeededToFit = scaleNeededToFitHeight;
		}

		// if scale and actual size enabled then switch between
		if (self.scaleToFitOnDoubleClick && self.actualSizeOnDoubleClick) {
			var isViewScaled = view.getAttributeNS(null, self.SIZE_STATE_NAME);
			var isScaled = false;

			// if scale is not 1 then view needs scaling
			if (scaleNeededToFit!=1) {

				// if current scale is at 1 it is at actual size
				// scale it to fit
				if (scaleValue==1) {
					self.scaleViewToFit(view);
					isScaled = true;
				}
				else {
					// scale is not at 1 so switch to actual size
					self.scaleViewToActualSize(view);
					isScaled = false;
				}
			}
			else {
				// view is smaller than viewport
				// so scale to fit() is scale actual size
				// actual size and scaled size are the same
				// but call scale to fit to retain centering
				self.scaleViewToFit(view);
				isScaled = false;
			}

			view.setAttributeNS(null, self.SIZE_STATE_NAME, isScaled+"");
			isViewScaled = view.getAttributeNS(null, self.SIZE_STATE_NAME);
		}
		else if (self.scaleToFitOnDoubleClick) {
			self.scaleViewToFit(view);
		}
		else if (self.actualSizeOnDoubleClick) {
			self.scaleViewToActualSize(view);
		}

	}

	self.scaleViewToFit = function(view) {
		return self.setViewScaleValue(view, true);
	}

	self.scaleViewToActualSize = function(view) {
		self.setViewScaleValue(view, false, 1);
	}

	self.onloadHandler = function(event) {
		self.initialize();
	}

	self.setElementHTML = function(id, value) {
		var element = self.getElement(id);
		element.innerHTML = value;
	}

	self.getStackArray = function(error) {
		var value = "";

		if (error==null) {
		  try {
			 error = new Error("Stack");
		  }
		  catch (e) {

		  }
		}

		if ("stack" in error) {
		  value = error.stack;
		  var methods = value.split(/\n/g);

		  var newArray = methods ? methods.map(function (value, index, array) {
			 value = value.replace(/\@.*/,"");
			 return value;
		  }) : null;

		  if (newArray && newArray[0].includes("getStackTrace")) {
			 newArray.shift();
		  }
		  if (newArray && newArray[0].includes("getStackArray")) {
			 newArray.shift();
		  }
		  if (newArray && newArray[0]=="") {
			 newArray.shift();
		  }

			return newArray;
		}

		return null;
	}

	self.log = function(value) {
		console.log.apply(this, [value]);
	}

	// initialize on load
	// sometimes the body size is 0 so we call this now and again later
	window.addEventListener("load", self.onloadHandler);
	window.document.addEventListener("DOMContentLoaded", self.onloadHandler);
}

window.application = new Application();
    </script>
</head>
<body>
    <div id="Web_1920__1">
        <div id="Groupe_2">
            <div id="menu" class="menu">
                <div id="ACCEUIL">
                    <span>ACCEUIL</span>
                </div>
                <div onclick="application.goToTargetView(event)" id="CONTACT">
                    <span>CONTACT</span>
                </div>
                <svg class="Rectangle_28">
                    <rect id="Rectangle_28" rx="3" ry="3" x="0" y="0" width="19" height="6">
                    </rect>
                </svg>
                <svg class="Rectangle_33">
                    <rect id="Rectangle_33" rx="3" ry="3" x="0" y="0" width="19" height="6">
                    </rect>
                </svg>
                <div onclick="application.goToTargetView(event)" id="NOS_PRODUITS">
                    <span>NOS PRODUITS</span>
                </div>
                <div onclick="application.goToTargetView(event)" id="bttn">
                    <svg class="Rectangle_1">
                        <rect id="Rectangle_1" rx="23.91200065612793" ry="23.91200065612793" x="0" y="0" width="203.774" height="47.824">
                        </rect>
                    </svg>
                    <div id="Se_Connecter">
                        <span>Se Connecter</span>
                    </div>
                </div>
                <div id="menu_icon">
                    <svg class="Rectangle_25">
                        <rect id="Rectangle_25" rx="2" ry="2" x="0" y="0" width="48.262" height="4">
                        </rect>
                    </svg>
                    <svg class="Rectangle_26">
                        <rect id="Rectangle_26" rx="2" ry="2" x="0" y="0" width="48.262" height="4">
                        </rect>
                    </svg>
                    <svg class="Rectangle_27">
                        <rect id="Rectangle_27" rx="2" ry="2" x="0" y="0" width="48.262" height="4">
                        </rect>
                    </svg>
                </div>
                <img id="logo" src="logo.png" srcset="logo.png 1x, logo@2x.png 2x">

            </div>
        </div>
        <div id="NOS_SERVICES">
            <span>NOS SERVICES</span>
        </div>
        <div id="NOS_REFERENCES">
            <span>NOS REFERENCES</span>
        </div>
        <div id="Grille_de_rptition_1">
            <div id="Groupe_5" class="Groupe_5">
                <svg class="Rectangle_34">
                    <rect onclick="application.goToTargetView(event)" id="Rectangle_34" rx="66" ry="66" x="0" y="0" width="546" height="464">
                    </rect>
                </svg>
                <svg class="Icon_awesome-arrow-circle-up" viewBox="0.563 0.563 80.925 80.925">
                    <path onclick="application.goToTargetView(event)" id="Icon_awesome-arrow-circle-up" d="M 0.5625 41.02484130859375 C 0.5625 18.67266082763672 18.67266082763672 0.5625 41.02484130859375 0.5625 C 63.37702178955078 0.5625 81.4871826171875 18.67266082763672 81.4871826171875 41.02484130859375 C 81.4871826171875 63.37702178955078 63.37702178955078 81.4871826171875 41.02484130859375 81.4871826171875 C 18.67266082763672 81.4871826171875 0.5625 63.37702178955078 0.5625 41.02484130859375 Z M 23.99150085449219 45.74000930786133 L 35.80389404296875 33.42183685302734 L 35.80389404296875 63.2138671875 C 35.80389404296875 65.38381958007812 37.54964828491211 67.12957763671875 39.7196044921875 67.12957763671875 L 42.330078125 67.12957763671875 C 44.50003433227539 67.12957763671875 46.24578857421875 65.38381958007812 46.24578857421875 63.2138671875 L 46.24578857421875 33.42183685302734 L 58.05818176269531 45.74000930786133 C 59.57551956176758 47.32261276245117 62.10441589355469 47.35524368286133 63.65438842773438 45.80527496337891 L 65.43276977539062 44.01057434082031 C 66.96642303466797 42.4769172668457 66.96642303466797 39.99697113037109 65.43276977539062 38.47962951660156 L 43.79846954345703 16.82901382446289 C 42.26481246948242 15.29536056518555 39.78486633300781 15.29536056518555 38.26752471923828 16.82901382446289 L 16.6005973815918 38.47962951660156 C 15.06694507598877 40.01328659057617 15.06694507598877 42.49323272705078 16.6005973815918 44.01057434082031 L 18.37898254394531 45.80527496337891 C 19.94526863098145 47.35524368286133 22.47416496276855 47.32261276245117 23.99150085449219 45.74000930786133 Z">
                    </path>
                </svg>
            </div>
            <div id="Groupe_5_bb" class="Groupe_5">
                <svg class="Rectangle_34_bc">
                    <rect id="Rectangle_34_bc" rx="66" ry="66" x="0" y="0" width="546" height="464">
                    </rect>
                </svg>
                <svg class="Icon_awesome-arrow-circle-up_bd" viewBox="0.563 0.563 80.925 80.925">
                    <path id="Icon_awesome-arrow-circle-up_bd" d="M 0.5625 41.02484130859375 C 0.5625 18.67266082763672 18.67266082763672 0.5625 41.02484130859375 0.5625 C 63.37702178955078 0.5625 81.4871826171875 18.67266082763672 81.4871826171875 41.02484130859375 C 81.4871826171875 63.37702178955078 63.37702178955078 81.4871826171875 41.02484130859375 81.4871826171875 C 18.67266082763672 81.4871826171875 0.5625 63.37702178955078 0.5625 41.02484130859375 Z M 23.99150085449219 45.74000930786133 L 35.80389404296875 33.42183685302734 L 35.80389404296875 63.2138671875 C 35.80389404296875 65.38381958007812 37.54964828491211 67.12957763671875 39.7196044921875 67.12957763671875 L 42.330078125 67.12957763671875 C 44.50003433227539 67.12957763671875 46.24578857421875 65.38381958007812 46.24578857421875 63.2138671875 L 46.24578857421875 33.42183685302734 L 58.05818176269531 45.74000930786133 C 59.57551956176758 47.32261276245117 62.10441589355469 47.35524368286133 63.65438842773438 45.80527496337891 L 65.43276977539062 44.01057434082031 C 66.96642303466797 42.4769172668457 66.96642303466797 39.99697113037109 65.43276977539062 38.47962951660156 L 43.79846954345703 16.82901382446289 C 42.26481246948242 15.29536056518555 39.78486633300781 15.29536056518555 38.26752471923828 16.82901382446289 L 16.6005973815918 38.47962951660156 C 15.06694507598877 40.01328659057617 15.06694507598877 42.49323272705078 16.6005973815918 44.01057434082031 L 18.37898254394531 45.80527496337891 C 19.94526863098145 47.35524368286133 22.47416496276855 47.32261276245117 23.99150085449219 45.74000930786133 Z">
                    </path>
                </svg>
            </div>
            <div id="Groupe_5_be" class="Groupe_5">
                <svg class="Rectangle_34_bf">
                    <rect id="Rectangle_34_bf" rx="66" ry="66" x="0" y="0" width="546" height="464">
                    </rect>
                </svg>
                <svg class="Icon_awesome-arrow-circle-up_bg" viewBox="0.563 0.563 80.925 80.925">
                    <path id="Icon_awesome-arrow-circle-up_bg" d="M 0.5625 41.02484130859375 C 0.5625 18.67266082763672 18.67266082763672 0.5625 41.02484130859375 0.5625 C 63.37702178955078 0.5625 81.4871826171875 18.67266082763672 81.4871826171875 41.02484130859375 C 81.4871826171875 63.37702178955078 63.37702178955078 81.4871826171875 41.02484130859375 81.4871826171875 C 18.67266082763672 81.4871826171875 0.5625 63.37702178955078 0.5625 41.02484130859375 Z M 23.99150085449219 45.74000930786133 L 35.80389404296875 33.42183685302734 L 35.80389404296875 63.2138671875 C 35.80389404296875 65.38381958007812 37.54964828491211 67.12957763671875 39.7196044921875 67.12957763671875 L 42.330078125 67.12957763671875 C 44.50003433227539 67.12957763671875 46.24578857421875 65.38381958007812 46.24578857421875 63.2138671875 L 46.24578857421875 33.42183685302734 L 58.05818176269531 45.74000930786133 C 59.57551956176758 47.32261276245117 62.10441589355469 47.35524368286133 63.65438842773438 45.80527496337891 L 65.43276977539062 44.01057434082031 C 66.96642303466797 42.4769172668457 66.96642303466797 39.99697113037109 65.43276977539062 38.47962951660156 L 43.79846954345703 16.82901382446289 C 42.26481246948242 15.29536056518555 39.78486633300781 15.29536056518555 38.26752471923828 16.82901382446289 L 16.6005973815918 38.47962951660156 C 15.06694507598877 40.01328659057617 15.06694507598877 42.49323272705078 16.6005973815918 44.01057434082031 L 18.37898254394531 45.80527496337891 C 19.94526863098145 47.35524368286133 22.47416496276855 47.32261276245117 23.99150085449219 45.74000930786133 Z">
                    </path>
                </svg>
            </div>
            <div id="Groupe_5_bh" class="Groupe_5">
                <svg class="Rectangle_34_bi">
                    <rect id="Rectangle_34_bi" rx="66" ry="66" x="0" y="0" width="546" height="464">
                    </rect>
                </svg>
                <svg class="Icon_awesome-arrow-circle-up_bj" viewBox="0.563 0.563 80.925 80.925">
                    <path id="Icon_awesome-arrow-circle-up_bj" d="M 0.5625 41.02484130859375 C 0.5625 18.67266082763672 18.67266082763672 0.5625 41.02484130859375 0.5625 C 63.37702178955078 0.5625 81.4871826171875 18.67266082763672 81.4871826171875 41.02484130859375 C 81.4871826171875 63.37702178955078 63.37702178955078 81.4871826171875 41.02484130859375 81.4871826171875 C 18.67266082763672 81.4871826171875 0.5625 63.37702178955078 0.5625 41.02484130859375 Z M 23.99150085449219 45.74000930786133 L 35.80389404296875 33.42183685302734 L 35.80389404296875 63.2138671875 C 35.80389404296875 65.38381958007812 37.54964828491211 67.12957763671875 39.7196044921875 67.12957763671875 L 42.330078125 67.12957763671875 C 44.50003433227539 67.12957763671875 46.24578857421875 65.38381958007812 46.24578857421875 63.2138671875 L 46.24578857421875 33.42183685302734 L 58.05818176269531 45.74000930786133 C 59.57551956176758 47.32261276245117 62.10441589355469 47.35524368286133 63.65438842773438 45.80527496337891 L 65.43276977539062 44.01057434082031 C 66.96642303466797 42.4769172668457 66.96642303466797 39.99697113037109 65.43276977539062 38.47962951660156 L 43.79846954345703 16.82901382446289 C 42.26481246948242 15.29536056518555 39.78486633300781 15.29536056518555 38.26752471923828 16.82901382446289 L 16.6005973815918 38.47962951660156 C 15.06694507598877 40.01328659057617 15.06694507598877 42.49323272705078 16.6005973815918 44.01057434082031 L 18.37898254394531 45.80527496337891 C 19.94526863098145 47.35524368286133 22.47416496276855 47.32261276245117 23.99150085449219 45.74000930786133 Z">
                    </path>
                </svg>
            </div>
            <div id="Groupe_5_bk" class="Groupe_5">
                <svg class="Rectangle_34_bl">
                    <rect id="Rectangle_34_bl" rx="66" ry="66" x="0" y="0" width="546" height="464">
                    </rect>
                </svg>
                <svg class="Icon_awesome-arrow-circle-up_bm" viewBox="0.563 0.563 80.925 80.925">
                    <path id="Icon_awesome-arrow-circle-up_bm" d="M 0.5625 41.02484130859375 C 0.5625 18.67266082763672 18.67266082763672 0.5625 41.02484130859375 0.5625 C 63.37702178955078 0.5625 81.4871826171875 18.67266082763672 81.4871826171875 41.02484130859375 C 81.4871826171875 63.37702178955078 63.37702178955078 81.4871826171875 41.02484130859375 81.4871826171875 C 18.67266082763672 81.4871826171875 0.5625 63.37702178955078 0.5625 41.02484130859375 Z M 23.99150085449219 45.74000930786133 L 35.80389404296875 33.42183685302734 L 35.80389404296875 63.2138671875 C 35.80389404296875 65.38381958007812 37.54964828491211 67.12957763671875 39.7196044921875 67.12957763671875 L 42.330078125 67.12957763671875 C 44.50003433227539 67.12957763671875 46.24578857421875 65.38381958007812 46.24578857421875 63.2138671875 L 46.24578857421875 33.42183685302734 L 58.05818176269531 45.74000930786133 C 59.57551956176758 47.32261276245117 62.10441589355469 47.35524368286133 63.65438842773438 45.80527496337891 L 65.43276977539062 44.01057434082031 C 66.96642303466797 42.4769172668457 66.96642303466797 39.99697113037109 65.43276977539062 38.47962951660156 L 43.79846954345703 16.82901382446289 C 42.26481246948242 15.29536056518555 39.78486633300781 15.29536056518555 38.26752471923828 16.82901382446289 L 16.6005973815918 38.47962951660156 C 15.06694507598877 40.01328659057617 15.06694507598877 42.49323272705078 16.6005973815918 44.01057434082031 L 18.37898254394531 45.80527496337891 C 19.94526863098145 47.35524368286133 22.47416496276855 47.32261276245117 23.99150085449219 45.74000930786133 Z">
                    </path>
                </svg>
            </div>
            <div id="Groupe_5_bn" class="Groupe_5">
                <svg class="Rectangle_34_bo">
                    <rect id="Rectangle_34_bo" rx="66" ry="66" x="0" y="0" width="546" height="464">
                    </rect>
                </svg>
                <svg class="Icon_awesome-arrow-circle-up_bp" viewBox="0.563 0.563 80.925 80.925">
                    <path id="Icon_awesome-arrow-circle-up_bp" d="M 0.5625 41.02484130859375 C 0.5625 18.67266082763672 18.67266082763672 0.5625 41.02484130859375 0.5625 C 63.37702178955078 0.5625 81.4871826171875 18.67266082763672 81.4871826171875 41.02484130859375 C 81.4871826171875 63.37702178955078 63.37702178955078 81.4871826171875 41.02484130859375 81.4871826171875 C 18.67266082763672 81.4871826171875 0.5625 63.37702178955078 0.5625 41.02484130859375 Z M 23.99150085449219 45.74000930786133 L 35.80389404296875 33.42183685302734 L 35.80389404296875 63.2138671875 C 35.80389404296875 65.38381958007812 37.54964828491211 67.12957763671875 39.7196044921875 67.12957763671875 L 42.330078125 67.12957763671875 C 44.50003433227539 67.12957763671875 46.24578857421875 65.38381958007812 46.24578857421875 63.2138671875 L 46.24578857421875 33.42183685302734 L 58.05818176269531 45.74000930786133 C 59.57551956176758 47.32261276245117 62.10441589355469 47.35524368286133 63.65438842773438 45.80527496337891 L 65.43276977539062 44.01057434082031 C 66.96642303466797 42.4769172668457 66.96642303466797 39.99697113037109 65.43276977539062 38.47962951660156 L 43.79846954345703 16.82901382446289 C 42.26481246948242 15.29536056518555 39.78486633300781 15.29536056518555 38.26752471923828 16.82901382446289 L 16.6005973815918 38.47962951660156 C 15.06694507598877 40.01328659057617 15.06694507598877 42.49323272705078 16.6005973815918 44.01057434082031 L 18.37898254394531 45.80527496337891 C 19.94526863098145 47.35524368286133 22.47416496276855 47.32261276245117 23.99150085449219 45.74000930786133 Z">
                    </path>
                </svg>
            </div>
        </div>
        <div id="ETUDE_TECHNIQUE">
            <span>ETUDE TECHNIQUE</span>
        </div>
        <div id="Fabrication_et">
            <span>Fabrication et</span>
        </div>
        <div id="CONTRAT_">
            <span>CONTRAT </span>
        </div>
        <div id="solution_sur_mesure">
            <span>solution sur mesure</span>
        </div>
        <div id="DENTRETIENMAINTENANCE">
            <span>D’ENTRETIEN/MAINTENANCE</span>
        </div>
        <div id="EXPERTISE_">
            <span>EXPERTISE</span><br>
        </div>
        <div id="DEVIS_GRATUIT">
            <span>DEVIS GRATUIT</span>
        </div>
        <div id="Service_aprs_vente_">
            <span>Service après vente</span><br>
        </div>
        <div id="FERMETURES_SOLUTIONS_ralise_en">
            <span>FERMETURES SOLUTIONS réalise en amont une étude technique de faisabilité, analyse les contraintes et … <br /></span><br>
        </div>
        <div id="Vous_vous_questionnez_sur_la_p">
            <span>Vous vous questionnez sur la pertinence de telle ou telle installation de porte, de fermeture …</span><br>
        </div>
        <div id="LEADER_FERMETURE_sassure_du_ma">
            <span>LEADER FERMETURE s’assure du maintien de l’état de conservations et du bon fonctionnement …</span>
        </div>
        <div id="FERMETURES_SOLUTIONS_sappuie_s">
            <span>FERMETURES SOLUTIONS s’appuie sur sa connaissance du marché et de ses marques pour proposer …</span>
        </div>
        <div id="Vous_avez_un_projet_un_besoin_">
            <span>Vous avez un projet, un besoin et les produits de LEADER FERMETURE vous intéressent ? …</span>
        </div>
        <div id="Vous_avez_un_problme_et_souhai">
            <span>Vous avez un problème et souhaitez qu’un professionnel certifié vienne vous dépanner?  ….</span>
        </div>
        <img id="AM-IMMOBILIER" src="AM-IMMOBILIER.png" srcset="AM-IMMOBILIER.png 1x, AM-IMMOBILIER@2x.png 2x">

        <img id="BYMARO-1" src="BYMARO-1.png" srcset="BYMARO-1.png 1x, BYMARO-1@2x.png 2x">

        <img id="CNIA" src="CNIA.png" srcset="CNIA.png 1x, CNIA@2x.png 2x">

        <img id="COCACOLA" src="COCACOLA.png" srcset="COCACOLA.png 1x, COCACOLA@2x.png 2x">

        <img id="COLGATE-ET-PALMOLIVE-300x161" src="COLGATE-ET-PALMOLIVE-300x161.png" srcset="COLGATE-ET-PALMOLIVE-300x161.png 1x, COLGATE-ET-PALMOLIVE-300x161@2x.png 2x">

        <img id="GSEM-300x161" src="GSEM-300x161.png" srcset="GSEM-300x161.png 1x, GSEM-300x161@2x.png 2x">

        <img id="HYUDAI" src="HYUDAI.png" srcset="HYUDAI.png 1x, HYUDAI@2x.png 2x">

        <svg class="Rectangle_35">
            <rect id="Rectangle_35" rx="63" ry="63" x="0" y="0" width="291" height="264">
            </rect>
        </svg>
        <img id="LILAS-PARK" src="LILAS-PARK.png" srcset="LILAS-PARK.png 1x, LILAS-PARK@2x.png 2x">

        <img id="LOGO-CGI" src="LOGO-CGI.png" srcset="LOGO-CGI.png 1x, LOGO-CGI@2x.png 2x">

        <svg class="Rectangle_35_ce">
            <rect id="Rectangle_35_ce" rx="63" ry="63" x="0" y="0" width="291" height="264">
            </rect>
        </svg>
        <svg class="Rectangle_35_cf">
            <rect id="Rectangle_35_cf" rx="63" ry="63" x="0" y="0" width="291" height="264">
            </rect>
        </svg>
        <svg class="Rectangle_35_cg">
            <rect id="Rectangle_35_cg" rx="63" ry="63" x="0" y="0" width="291" height="264">
            </rect>
        </svg>
        <img id="PRODEC" src="PRODEC.png" srcset="PRODEC.png 1x, PRODEC@2x.png 2x">

        <img id="RENEAULT" src="RENEAULT.png" srcset="RENEAULT.png 1x, RENEAULT@2x.png 2x">

        <img id="RMA-WATANIA" src="RMA-WATANIA.png" srcset="RMA-WATANIA.png 1x, RMA-WATANIA@2x.png 2x">

        <img id="SNTL" src="SNTL.png" srcset="SNTL.png 1x, SNTL@2x.png 2x">

        <img id="SUPERCERAME" src="SUPERCERAME.png" srcset="SUPERCERAME.png 1x, SUPERCERAME@2x.png 2x">

        <svg class="Rectangle_35_cm">
            <rect id="Rectangle_35_cm" rx="63" ry="63" x="0" y="0" width="291" height="264">
            </rect>
        </svg>
        <svg class="Rectangle_35_cn">
            <rect id="Rectangle_35_cn" rx="63" ry="63" x="0" y="0" width="291" height="264">
            </rect>
        </svg>
        <svg class="Rectangle_35_co">
            <rect id="Rectangle_35_co" rx="63" ry="63" x="0" y="0" width="291" height="264">
            </rect>
        </svg>
        <img id="LAFARGE-300x104" src="LAFARGE-300x104.png" srcset="LAFARGE-300x104.png 1x, LAFARGE-300x104@2x.png 2x">

        <img id="LOGO-DLM" src="LOGO-DLM.png" srcset="LOGO-DLM.png 1x, LOGO-DLM@2x.png 2x">

        <img id="LOGO-PROMOPHARMA-300x87" src="LOGO-PROMOPHARMA-300x87.png" srcset="LOGO-PROMOPHARMA-300x87.png 1x, LOGO-PROMOPHARMA-300x87@2x.png 2x">

        <img id="MAZAGAN-300x67" src="MAZAGAN-300x67.png" srcset="MAZAGAN-300x67.png 1x, MAZAGAN-300x67@2x.png 2x">

        <img id="TATE-LYLE-300x90" src="TATE-LYLE-300x90.png" srcset="TATE-LYLE-300x90.png 1x, TATE-LYLE-300x90@2x.png 2x">

        <img id="UNIVERSACIER" src="UNIVERSACIER.png" srcset="UNIVERSACIER.png 1x, UNIVERSACIER@2x.png 2x">

        <img id="WESTERN-UNION-300x74" src="WESTERN-UNION-300x74.png" srcset="WESTERN-UNION-300x74.png 1x, WESTERN-UNION-300x74@2x.png 2x">

        <div id="Footer_8">
            <svg class="Base">
                <rect id="Base" rx="0" ry="0" x="0" y="0" width="1920" height="317">
                </rect>
            </svg>
            <div id="Facebook_Twitter_Instagram">
                <span>Facebook<br />Twitter<br />Instagram</span>
            </div>
            <div id="_Moayas">
                <span>© Moaya’s</span>
            </div>
            <div id="Required_Field">
                <svg class="Rectangle_130">
                    <rect id="Rectangle_130" rx="4" ry="4" x="0" y="0" width="266" height="51">
                    </rect>
                </svg>
                <div id="Votre_Adresse_email">
                    <span>Votre Adresse email</span>
                </div>
            </div>
            <div id="button">
                <svg class="Rectangle_131">
                    <rect id="Rectangle_131" rx="0" ry="0" x="0" y="0" width="76" height="51">
                    </rect>
                </svg>
                <div id="OK">
                    <span>OK</span>
                </div>
            </div>
            <div id="Recevez_nos_nouvelles">
                <span>Recevez nos nouvelles</span>
            </div>
            <svg class="Trac_38" viewBox="80 0 9.269 17.75">
                <path id="Trac_38" d="M 86.01518249511719 17.74970626831055 L 86.01518249511719 9.663728713989258 L 88.77625274658203 9.663728713989258 L 89.17070007324219 6.508225917816162 L 86.01518249511719 6.508225917816162 L 86.01518249511719 4.536036014556885 C 86.01518249511719 3.648550987243652 86.31102752685547 2.958284616470337 87.59294128417969 2.958284616470337 L 89.26929473876953 2.958284616470337 L 89.26929473876953 0.09860947728157043 C 88.87485504150391 0.09860947728157043 87.88877105712891 0 86.80406188964844 0 C 84.43743133544922 0 82.76107025146484 1.479142069816589 82.76107025146484 4.141597747802734 L 82.76107025146484 6.508224964141846 L 80 6.508224964141846 L 80 9.663728713989258 L 82.76107025146484 9.663728713989258 L 82.76107025146484 17.74970626831055 L 86.01518249511719 17.74970626831055 Z">
                </path>
            </svg>
            <svg class="Trac_39" viewBox="38 2 17.75 14.397">
                <path id="Trac_39" d="M 43.62074279785156 16.39698791503906 C 50.32618713378906 16.39698791503906 53.9747314453125 10.87485599517822 53.9747314453125 6.042990684509277 C 53.9747314453125 5.845771789550781 53.9747314453125 5.747161865234375 53.9747314453125 5.549942970275879 C 54.66500854492188 5.05689525604248 55.25666809082031 4.366628646850586 55.74971008300781 3.676361799240112 C 55.05944061279297 3.972190618515015 54.36917114257812 4.16940975189209 53.67890930175781 4.268019676208496 C 54.46778869628906 3.774971723556519 54.96083831787109 3.084704637527466 55.25666809082031 2.295828819274902 C 54.56639099121094 2.690266370773315 53.77751922607422 2.98609471321106 52.9886474609375 3.183314323425293 C 52.29837036132812 2.394437789916992 51.31227874755859 2 50.32618713378906 2 C 48.35400390625 2 46.67763519287109 3.676361322402954 46.67763519287109 5.648551940917969 C 46.67763519287109 5.944379806518555 46.67763519287109 6.240208625793457 46.77623748779297 6.43742847442627 C 43.71935272216797 6.240209579467773 41.05689239501953 4.859676361083984 39.28192138671875 2.591656923294067 C 38.98609161376953 3.084704637527466 38.78887176513672 3.77497124671936 38.78887176513672 4.465237617492676 C 38.78887176513672 5.747161865234375 39.47914886474609 6.831866264343262 40.36663055419922 7.522132873535156 C 39.77497100830078 7.522132873535156 39.18331909179688 7.324913024902344 38.69026184082031 7.029085159301758 C 38.69026184082031 7.029085159301758 38.69026184082031 7.029085159301758 38.69026184082031 7.029085159301758 C 38.69026184082031 8.804057121276855 39.97219085693359 10.28319835662842 41.64855194091797 10.57902717590332 C 41.35272216796875 10.67763614654541 41.05689239501953 10.67763614654541 40.66245269775391 10.67763614654541 C 40.46523284912109 10.67763614654541 40.16940307617188 10.67763614654541 39.97219085693359 10.57902717590332 C 40.46523284912109 12.05817031860352 41.74715423583984 13.04426383972168 43.42351531982422 13.14287376403809 C 42.14159393310547 14.12896919250488 40.5638427734375 14.72062683105469 38.88748931884766 14.72062683105469 C 38.59165954589844 14.72062683105469 38.29582977294922 14.72062683105469 37.99999237060547 14.62201595306396 C 39.57775115966797 15.80533027648926 41.54993438720703 16.39698791503906 43.62074279785156 16.39698791503906">
                </path>
            </svg>
            <svg class="Trac_40" viewBox="0 0 17.75 17.75">
                <path id="Trac_40" d="M 8.874856948852539 1.577752351760864 C 11.24148559570312 1.577752351760864 11.53731441497803 1.577752351760864 12.42480087280273 1.676362037658691 C 13.31228542327881 1.676362037658691 13.80533313751221 1.873581171035767 14.10116195678711 1.972190499305725 C 14.4955997467041 2.169409513473511 14.791428565979 2.366628408432007 15.08725643157959 2.66245698928833 C 15.38308525085449 2.958285570144653 15.58030414581299 3.254114389419556 15.7775239944458 3.648552656173706 C 15.87613296508789 3.94438099861145 16.07335090637207 4.43742847442627 16.07335090637207 5.32491397857666 C 16.07335090637207 6.212400436401367 16.17196273803711 6.508228778839111 16.17196273803711 8.874856948852539 C 16.17196273803711 11.24148559570312 16.17196273803711 11.53731441497803 16.07335090637207 12.42480087280273 C 16.07335090637207 13.31228542327881 15.87613105773926 13.80533313751221 15.77752208709717 14.10116195678711 C 15.58030319213867 14.4955997467041 15.38308334350586 14.791428565979 15.08725643157959 15.08725643157959 C 14.791428565979 15.38308525085449 14.49559879302979 15.58030414581299 14.10116100311279 15.7775239944458 C 13.80533218383789 15.87613296508789 13.31228446960449 16.07335090637207 12.42479991912842 16.07335090637207 C 11.53731441497803 16.07335090637207 11.24148559570312 16.17196273803711 8.874856948852539 16.17196273803711 C 6.508228302001953 16.17196273803711 6.212400436401367 16.17196273803711 5.32491397857666 16.07335090637207 C 4.43742847442627 16.07335090637207 3.94438099861145 15.87613105773926 3.648552656173706 15.77752208709717 C 3.254114151000977 15.58030319213867 2.958285570144653 15.38308334350586 2.66245698928833 15.08725643157959 C 2.366628408432007 14.791428565979 2.169409513473511 14.49559879302979 1.972190499305725 14.10116100311279 C 1.873580932617188 13.80533218383789 1.676362037658691 13.31228446960449 1.676362037658691 12.42479991912842 C 1.676362037658691 11.53731441497803 1.577752351760864 11.24148559570312 1.577752351760864 8.874856948852539 C 1.577752351760864 6.508228302001953 1.577752351760864 6.212400436401367 1.676362037658691 5.32491397857666 C 1.676362037658691 4.43742847442627 1.873580932617188 3.94438099861145 1.972190499305725 3.648552656173706 C 2.169409513473511 3.254114151000977 2.366628408432007 2.958285570144653 2.66245698928833 2.66245698928833 C 2.958285570144653 2.26801872253418 3.254114151000977 2.070799827575684 3.648552656173706 1.972190499305725 C 3.94438099861145 1.873580932617188 4.43742847442627 1.676362037658691 5.32491397857666 1.676362037658691 C 6.212400436401367 1.577752351760864 6.508228302001953 1.577752351760864 8.874856948852539 1.577752351760864 M 8.874856948852539 0 C 6.508228302001953 0 6.113790512084961 0 5.22630500793457 0.09860952198505402 C 4.240209579467773 0.09860952198505402 3.648552656173706 0.2958285510540009 3.05689549446106 0.4930476248264313 C 2.465238332748413 0.6902667284011841 1.972190499305725 0.9860952496528625 1.479142785072327 1.479142785072327 C 0.9860952496528625 1.972190499305725 0.6902667284011841 2.465238332748413 0.4930476248264313 3.05689525604248 C 0.197219043970108 3.648552656173706 0.09860952198505402 4.240209579467773 0.09860952198505402 5.22630500793457 C 0 6.113790512084961 0 6.508228302001953 0 8.874856948852539 C 0 11.24148559570312 0 11.6359224319458 0.09860952198505402 12.52340793609619 C 0.09860952198505402 13.50950336456299 0.2958285510540009 14.10116195678711 0.4930476248264313 14.69281768798828 C 0.6902667284011841 15.2844762802124 0.9860952496528625 15.7775239944458 1.479142785072327 16.27057075500488 C 1.972190499305725 16.76361846923828 2.465238332748413 17.05944633483887 3.05689525604248 17.25666618347168 C 3.648552417755127 17.45388603210449 4.240209579467773 17.65110397338867 5.22630500793457 17.65110397338867 C 6.113790512084961 17.74971389770508 6.508228302001953 17.74971389770508 8.874856948852539 17.74971389770508 C 11.24148559570312 17.74971389770508 11.6359224319458 17.74971389770508 12.52340793609619 17.65110397338867 C 13.50950336456299 17.65110397338867 14.10116195678711 17.45388412475586 14.69281768798828 17.25666618347168 C 15.2844762802124 17.05944633483887 15.7775239944458 16.76361846923828 16.27057075500488 16.27057075500488 C 16.76361846923828 15.7775239944458 17.05944633483887 15.2844762802124 17.25666618347168 14.69281768798828 C 17.45388603210449 14.10116100311279 17.65110397338867 13.50950336456299 17.65110397338867 12.52340793609619 C 17.65110397338867 11.53731441497803 17.74971389770508 11.24148559570312 17.74971389770508 8.874856948852539 C 17.74971389770508 6.508228302001953 17.74971389770508 6.113790512084961 17.65110397338867 5.22630500793457 C 17.65110397338867 4.240209579467773 17.45388412475586 3.648552656173706 17.25666618347168 3.05689549446106 C 17.05944633483887 2.465238332748413 16.76361846923828 1.972190499305725 16.27057075500488 1.479142904281616 C 15.7775239944458 0.9860953092575073 15.2844762802124 0.6902667880058289 14.69281768798828 0.4930477142333984 C 14.10116100311279 0.2958287000656128 13.50950336456299 0.09860962629318237 12.52340793609619 0.09860962629318237 C 11.6359224319458 0 11.24148559570312 0 8.874856948852539 0 M 8.874856948852539 4.338819026947021 C 6.311009407043457 4.338819026947021 4.338819026947021 6.311009407043457 4.338819026947021 8.874856948852539 C 4.338819026947021 11.43870449066162 6.409618377685547 13.41089630126953 8.874856948852539 13.41089630126953 C 11.43870449066162 13.41089630126953 13.41089630126953 11.34009552001953 13.41089630126953 8.874856948852539 C 13.41089630126953 6.409618377685547 11.43870449066162 4.338819026947021 8.874856948852539 4.338819026947021 M 8.874856948852539 11.83314228057861 C 7.198494911193848 11.83314228057861 5.916571140289307 10.55121898651123 5.916571140289307 8.874856948852539 C 5.916571140289307 7.198494911193848 7.198494911193848 5.916571140289307 8.874856948852539 5.916571140289307 C 10.55121898651123 5.916571140289307 11.83314228057861 7.198494911193848 11.83314228057861 8.874856948852539 C 11.83314228057861 10.55121898651123 10.55121898651123 11.83314228057861 8.874856948852539 11.83314228057861 M 13.60811519622803 3.05689525604248 C 13.01645660400391 3.05689525604248 12.52340793609619 3.5499427318573 12.52340793609619 4.141599655151367 C 12.52340793609619 4.733256816864014 13.01645660400391 5.226304054260254 13.60811519622803 5.226304054260254 C 14.1997709274292 5.226304054260254 14.6928186416626 4.733256816864014 14.6928186416626 4.141599655151367 C 14.69281768798828 3.5499427318573 14.1997709274292 3.05689525604248 13.60811519622803 3.05689525604248">
                </path>
            </svg>
            <div id="_Lot_El_Massar_n97_Route____de">
                <span> Lot El Massar n97, Route    de Safi, Marrakech 40000</span>
            </div>
            <div id="ID212657539555">
                <span>+212657539555</span>
            </div>
            <div id="Webmasterfermeture-solutionsma">
                <span>Webmaster@fermeture-solutions.ma</span>
            </div>
            <svg class="Icon_awesome-home" viewBox="-0.001 2.254 63.395 44.877">
                <path id="Icon_awesome-home" d="M 30.85588836669922 13.89581298828125 L 10.56559944152832 29.10864448547363 L 10.56559944152832 45.52767944335938 C 10.56559944152832 46.4129524230957 11.3539514541626 47.130615234375 12.32643222808838 47.130615234375 L 24.65885925292969 47.10155868530273 C 25.62790298461914 47.09715270996094 26.4109001159668 46.38077926635742 26.410888671875 45.49862670898438 L 26.410888671875 35.91008758544922 C 26.410888671875 35.02481079101562 27.19923782348633 34.30715179443359 28.17172050476074 34.30715179443359 L 35.21504211425781 34.30715179443359 C 36.18752670288086 34.30715179443359 36.97587585449219 35.02481079101562 36.97587585449219 35.91008758544922 L 36.97587585449219 45.49161148071289 C 36.97441482543945 45.9176025390625 37.15928268432617 46.32660293579102 37.48966217041016 46.62829971313477 C 37.82004165649414 46.92999267578125 38.26875305175781 47.09955596923828 38.73670959472656 47.09955596923828 L 51.06473159790039 47.130615234375 C 52.03721237182617 47.130615234375 52.82556533813477 46.4129524230957 52.82556533813477 45.52767944335938 L 52.82556533813477 29.09762382507324 L 32.53968048095703 13.89581298828125 C 32.04829406738281 13.53524780273438 31.34727668762207 13.53524780273438 30.85588836669922 13.89581298828125 Z M 62.90632247924805 24.2357292175293 L 53.70597839355469 17.33209991455078 L 53.70597839355469 3.455715179443359 C 53.70597839355469 2.79175853729248 53.11471939086914 2.253515720367432 52.38535690307617 2.253515720367432 L 46.22244262695312 2.253515720367432 C 45.49308776855469 2.253515720367432 44.90182495117188 2.79175877571106 44.90182495117188 3.455715179443359 L 44.90182495117188 10.73002147674561 L 35.04886245727539 3.35052227973938 C 33.09882736206055 1.889734148979187 30.28573799133301 1.889734148979187 28.3356990814209 3.35052227973938 L 0.4782344698905945 24.2357292175293 C -0.08418836444616318 24.65890121459961 -0.1630398780107498 25.41709136962891 0.3021516501903534 25.92882919311523 L 3.108477354049683 29.03450775146484 C 3.331257581710815 29.28110694885254 3.65264630317688 29.43690490722656 4.001760005950928 29.46753883361816 C 4.350874423980713 29.49817085266113 4.699035167694092 29.40112686157227 4.969456672668457 29.19780540466309 L 30.85588836669922 9.788298606872559 C 31.34727668762207 9.427734375 32.04829406738281 9.427734375 32.5396842956543 9.788299560546875 L 58.42720413208008 29.19780540466309 C 58.98935317993164 29.62128067016602 59.82223510742188 29.54949951171875 60.28709030151367 29.03751373291016 L 63.09341430664062 25.93183326721191 C 63.31657409667969 25.68466186523438 63.42229843139648 25.3667163848877 63.38718795776367 25.04837799072266 C 63.35206985473633 24.73003959655762 63.17901611328125 24.43757247924805 62.90633010864258 24.2357292175293 Z">
                </path>
            </svg>
            <svg class="Icon_awesome-phone-alt" viewBox="0 0 43 43">
                <path id="Icon_awesome-phone-alt" d="M 41.77302932739258 30.38549041748047 L 32.36677169799805 26.3542366027832 C 31.54131126403809 26.00244331359863 30.58269309997559 26.23867225646973 30.01520538330078 26.93373107910156 L 25.84957695007324 32.02318954467773 C 25.84957695007324 32.02318954467773 14.05077648162842 23.67955780029297 10.9683723449707 17.14198875427246 L 16.05783081054688 12.97635269165039 C 16.75439262390137 12.40981769561768 16.99089241027832 11.45010471343994 16.6373233795166 10.62478828430176 L 12.60606861114502 1.218527317047119 C 12.21644687652588 0.3252573311328888 11.24679851531982 -0.1648555099964142 10.29649448394775 0.05114336684346199 L 1.562111258506775 2.066770792007446 C 0.6475303173065186 2.277966976165771 -0.0002102854050463066 3.092517375946045 2.317973546439589e-08 4.031167030334473 C 2.317973546439589e-08 25.57318115234375 17.46037101745605 42.99995803833008 38.96879196166992 42.99995803833008 C 39.90776062011719 43.00056457519531 40.72277069091797 42.35273742675781 40.93403244018555 41.43784713745117 L 42.94965744018555 32.70346450805664 C 43.16424560546875 31.74859619140625 42.67048263549805 30.77587699890137 41.77302932739258 30.38549423217773 Z">
                </path>
            </svg>
            <svg class="Icon_simple-email" viewBox="1.67 0 43 47.418">
                <path id="Icon_simple-email" d="M 44.6402473449707 21.88543319702148 C 44.57273483276367 23.67696189880371 44.30841827392578 25.45563125610352 43.85206604003906 27.18937683105469 C 43.42887878417969 28.84607124328613 42.73184204101562 30.42041206359863 41.78974533081055 31.84736442565918 C 40.87118530273438 33.21039199829102 39.70668792724609 34.31562805175781 38.29329299926758 35.15714645385742 C 36.87100601196289 35.99570083618164 35.17315292358398 36.41646194458008 33.1878776550293 36.41646194458008 C 31.79521942138672 36.41646194458008 30.56553649902344 36.11422729492188 29.49585914611816 35.51271438598633 C 28.42914581298828 34.91120529174805 27.5994758605957 34.06079864501953 27.00093078613281 32.95556259155273 C 25.34159660339355 35.19566345214844 23.107421875 36.31571578979492 20.31025886535645 36.31571578979492 C 19.08650016784668 36.31571578979492 17.97533798217773 36.04310989379883 16.97381210327148 35.5008659362793 C 15.95857334136963 34.9460563659668 15.09793853759766 34.14653015136719 14.46999359130859 33.17483139038086 C 13.75728893280029 32.06620788574219 13.26437187194824 30.83089256286621 13.0180778503418 29.53615379333496 C 12.71433448791504 27.97265243530273 12.65038967132568 26.37201881408691 12.82843780517578 24.78926849365234 C 13.07733821868896 22.65583801269531 13.56328582763672 20.7120475769043 14.27442836761475 18.97567176818848 C 14.98557186126709 17.2363338470459 15.87450122833252 15.75182247161865 16.9471435546875 14.52213668823242 C 18.01385879516602 13.29245185852051 19.24057960510254 12.34426021575928 20.62138366699219 11.68349075317383 C 22.01699447631836 11.02009963989258 23.54450988769531 10.68076324462891 25.0897331237793 10.6908540725708 C 26.10903930664062 10.6908540725708 26.99796676635742 10.76789474487305 27.7624454498291 10.91901206970215 C 28.52692413330078 11.07309341430664 29.21436309814453 11.28050994873047 29.83661460876465 11.54126262664795 C 30.45886421203613 11.80794143676758 31.02777671813965 12.10425090789795 31.55521011352539 12.44797039031982 C 32.07967758178711 12.78576374053955 32.60710906982422 13.13540935516357 33.1315803527832 13.49098110198975 L 31.833740234375 28.42498970031738 C 31.74485015869141 29.14206123352051 31.76262664794922 29.72282791137695 31.87226104736328 30.1732177734375 C 31.98189544677734 30.6176815032959 32.15968322753906 30.98214340209961 32.40562057495117 31.25178527832031 C 32.65155792236328 31.52439117431641 32.9389762878418 31.71106338500977 33.27084350585938 31.81477355957031 C 34.31982803344727 32.14953994750977 35.46718215942383 31.92364883422852 36.31097793579102 31.21622657775879 C 36.93323135375977 30.71250152587891 37.48140335083008 30.02209854125977 37.94068145751953 29.14205741882324 C 38.39699935913086 28.25905609130859 38.7614631652832 27.21604537963867 39.03702926635742 26.02487945556641 C 39.30370712280273 24.82778739929199 39.46667861938477 23.53587913513184 39.51705169677734 22.14322280883789 C 39.65335464477539 19.49717712402344 39.44889831542969 17.07632637023926 38.90665435791016 14.88956165313721 C 38.36144638061523 12.70279693603516 37.46659088134766 10.83011817932129 36.22208786010742 9.277456283569336 C 34.93740081787109 7.697516441345215 33.28522491455078 6.45634937286377 31.41001892089844 5.662478446960449 C 29.45437622070312 4.80910587310791 27.11352920532227 4.379456996917725 24.39933395385742 4.379456996917725 C 21.82143974304199 4.379456996917725 19.51022529602051 4.883183479309082 17.46568870544434 5.890635967254639 C 15.43081855773926 6.8954758644104 13.63448429107666 8.324054718017578 12.19730186462402 10.08045101165771 C 10.67858123779297 11.95719718933105 9.51025390625 14.0921049118042 8.748256683349609 16.38296508789062 C 7.918588638305664 18.79788589477539 7.435604572296143 21.42022705078125 7.296338558197021 24.23517036437988 C 7.162999153137207 27.28715896606445 7.408936500549316 29.95394706726074 8.037113189697266 32.24738311767578 C 8.665288925170898 34.54082107543945 9.637185096740723 36.45497894287109 10.96465301513672 37.98986434936523 C 12.30323028564453 39.53668975830078 14.00878810882568 40.72262954711914 15.92487621307373 41.43891143798828 C 17.91015243530273 42.20042419433594 20.19173622131348 42.58266830444336 22.76963233947754 42.58266830444336 C 24.27903938293457 42.5666618347168 25.78337478637695 42.4049186706543 27.26168251037598 42.09968566894531 C 28.00246047973633 41.9515266418457 28.70471382141113 41.77374267578125 29.37437438964844 41.57817840576172 C 30.04403305053711 41.3796501159668 30.64850616455078 41.1633415222168 31.19371604919434 40.92629241943359 L 32.13301467895508 45.15166854858398 C 31.5403938293457 45.53687286376953 30.85888290405273 45.87466430664062 30.09736824035645 46.15912246704102 C 29.3110294342041 46.44230651855469 28.50737953186035 46.67488861083984 27.69133758544922 46.85545349121094 C 26.04135704040527 47.22350311279297 24.35644721984863 47.41226196289062 22.66592407226562 47.41844177246094 C 19.22280311584473 47.41844177246094 16.16785049438477 46.92656707763672 13.50402641296387 45.94282150268555 C 10.84316444396973 44.95907211303711 8.61491584777832 43.49530029296875 6.82520580291748 41.551513671875 C 5.035494804382324 39.61068725585938 3.699138641357422 37.19576263427734 2.816135883331299 34.30081558227539 C 1.936094164848328 31.40882873535156 1.56274402141571 28.04867553710938 1.696083426475525 24.23517036437988 C 1.850164294242859 20.75649261474609 2.490193367004395 17.53857040405273 3.622096061706543 14.57547378540039 C 4.748073101043701 11.6183032989502 6.294809341430664 9.064113616943359 8.262306213378906 6.901052951812744 C 10.24522399902344 4.740447998046875 12.65589809417725 3.015943765640259 15.34114265441895 1.837120652198792 C 18.07904815673828 0.6103979349136353 21.13103675842285 0 24.50896835327148 0 C 27.86912155151367 0 30.82925415039062 0.5333574414253235 33.392333984375 1.591183066368103 C 35.95244979858398 2.651971817016602 38.09180450439453 4.139446258544922 39.80447387695312 6.065459728240967 C 41.51714706420898 7.991472721099854 42.78534698486328 10.29676246643066 43.60908889770508 12.97836399078369 C 44.43283081054688 15.65996646881104 44.77655029296875 18.62899017333984 44.6402473449707 21.88543319702148 Z M 19.19317054748535 24.78926849365234 C 19.00649642944336 26.99084854125977 19.1783561706543 28.65907287597656 19.71467590332031 29.78801155090332 C 20.24803352355957 30.91398811340332 21.10733222961426 31.47697639465332 22.29257202148438 31.47697639465332 C 22.59367370605469 31.46969413757324 22.8917121887207 31.41468811035156 23.17557334899902 31.31400871276855 C 23.50151443481445 31.20437431335449 23.8452320098877 30.99991989135742 24.19191551208496 30.70361137390137 C 24.54155921936035 30.40730094909668 24.88528060913086 29.99246597290039 25.22307205200195 29.45911026000977 C 25.56679153442383 28.92575263977051 25.88088035583496 28.22053527832031 26.17126274108887 27.35531234741211 L 27.18464279174805 15.7518253326416 C 26.68091583251953 15.61552238464355 26.14755821228027 15.54440784454346 25.60827445983887 15.54440784454346 C 24.58896827697754 15.54440784454346 23.71781921386719 15.7518253326416 22.98593521118164 16.14591598510742 C 22.22876739501953 16.57003784179688 21.59000968933105 17.17721557617188 21.12807655334473 17.91192245483398 C 20.57151985168457 18.81134414672852 20.15583038330078 19.79061508178711 19.89542579650879 20.81575202941895 C 19.58133697509766 21.97136306762695 19.34725189208984 23.28994369506836 19.19613456726074 24.78630638122559 Z">
                </path>
            </svg>
        </div>
        <div id="Composant_3__1" class="Composant_3___1">
            <img id="slider_1_edited" src="slider_1_edited.png" srcset="slider_1_edited.png 1x, slider_1_edited@2x.png 2x">

            <img id="slider2_edited" src="slider2_edited.png" srcset="slider2_edited.png 1x, slider2_edited@2x.png 2x">

            <img id="slider3" src="slider3.png" srcset="slider3.png 1x, slider3@2x.png 2x">

            <div id="text">
                <div id="Fermeture_Solution_est_votre_e">
                    <span>Fermeture Solution est votre expert en fourniture et pose de solutions de fermeture conçues pour votre sécurité et votre confort.</span>
                </div>
                <div onclick="application.goToTargetView(event)" id="bttn_dm">
                    <svg class="Rectangle_1_dn">
                        <rect id="Rectangle_1_dn" rx="44" ry="44" x="0" y="0" width="310" height="88">
                        </rect>
                    </svg>
                    <div id="CONTACTER_NOUS">
                        <span>CONTACTER NOUS</span>
                    </div>
                </div>
            </div>
            <div onclick="application.goToTargetView(event)" id="next">
                <svg class="Ellipse_2">
                    <ellipse id="Ellipse_2" rx="48" ry="48" cx="48" cy="48">
                    </ellipse>
                </svg>
                <div id="tree-leaf">
                    <div id="Groupe_4">
                        <svg class="Trac_90" viewBox="0 0 22.246 22.255">
                            <path id="Trac_90" d="M 21.83025360107422 0.4163218140602112 C 21.54803657531738 0.1340947151184082 21.1596508026123 -0.01649176701903343 20.76146125793457 0.001436060993000865 C 19.37786102294922 0.06380164623260498 18.03920364379883 0.2441708743572235 16.91171073913574 0.4123580157756805 C 14.2721700668335 0.8069518208503723 11.69954681396484 1.391261458396912 9.265397071838379 2.149140119552612 C 8.234713554382324 2.47009539604187 6.881399631500244 2.922765254974365 5.553429126739502 3.580893516540527 C 4.615072727203369 4.04654598236084 3.54423975944519 4.614781379699707 2.713377475738525 5.469277381896973 C 2.707485675811768 5.47535228729248 2.701595067977905 5.481497287750244 2.695776224136353 5.487640857696533 C 0.5402175188064575 7.784982204437256 -0.4067938923835754 11.0126895904541 0.1623146384954453 14.12178611755371 C 0.3740220069885254 15.27803707122803 0.7929256558418274 16.36666870117188 1.4282546043396 17.43373870849609 C 1.645842909812927 17.80048179626465 1.949482440948486 18.22962188720703 16.68594932556152 5.560659408569336 C 3.960718870162964 20.24788856506348 4.325311660766602 20.5116138458252 4.794176578521729 20.80448913574219 C 5.89409351348877 21.49361801147461 7.242974281311035 21.9935131072998 8.677274703979492 22.17624092102051 C 9.089977264404297 22.22868537902832 9.511262893676758 22.25538635253906 9.929421424865723 22.25538635253906 C 9.92949390411377 22.25538635253906 9.929421424865723 22.25538635253906 9.929603576660156 22.25538635253906 C 11.55638027191162 22.25538635253906 13.16886711120605 21.85663223266602 14.59221744537354 21.10247039794922 C 15.56399536132812 20.58768653869629 16.35452461242676 20.00200080871582 16.94229125976562 19.36103439331055 C 17.84602546691895 18.37420082092285 18.45695495605469 17.16987991333008 18.93566131591797 16.1216926574707 C 20.05271148681641 13.67372703552246 20.68313217163086 11.04225826263428 21.23304176330566 8.55744743347168 C 21.8172721862793 5.922638893127441 22.14830207824707 3.609406471252441 22.24485397338867 1.485448837280273 C 22.26292991638184 1.086597442626953 22.11248970031738 0.6986576914787292 21.83025360107422 0.4163218140602112 Z">
                            </path>
                        </svg>
                    </div>
                </div>
                <svg class="Ellipse_3">
                    <ellipse id="Ellipse_3" rx="63.5" ry="63.5" cx="63.5" cy="63.5">
                    </ellipse>
                </svg>
            </div>
            <div onclick="application.goToTargetView(event)" id="next_dv">
                <svg class="Ellipse_2_dw">
                    <ellipse id="Ellipse_2_dw" rx="48" ry="48" cx="48" cy="48">
                    </ellipse>
                </svg>
                <div id="tree-leaf_dx">
                    <div id="Groupe_4_dy">
                        <svg class="Trac_90_dz" viewBox="0 0 22.246 22.255">
                            <path id="Trac_90_dz" d="M 21.83025360107422 0.4163218140602112 C 21.54803657531738 0.1340947151184082 21.1596508026123 -0.01649176701903343 20.76146125793457 0.001436060993000865 C 19.37786102294922 0.06380164623260498 18.03920364379883 0.2441708743572235 16.91171073913574 0.4123580157756805 C 14.2721700668335 0.8069518208503723 11.69954681396484 1.391261458396912 9.265397071838379 2.149140119552612 C 8.234713554382324 2.47009539604187 6.881399631500244 2.922765254974365 5.553429126739502 3.580893516540527 C 4.615072727203369 4.04654598236084 3.54423975944519 4.614781379699707 2.713377475738525 5.469277381896973 C 2.707485675811768 5.47535228729248 2.701595067977905 5.481497287750244 2.695776224136353 5.487640857696533 C 0.5402175188064575 7.784982204437256 -0.4067938923835754 11.0126895904541 0.1623146384954453 14.12178611755371 C 0.3740220069885254 15.27803707122803 0.7929256558418274 16.36666870117188 1.4282546043396 17.43373870849609 C 1.645842909812927 17.80048179626465 1.949482440948486 18.22962188720703 16.68594932556152 5.560659408569336 C 3.960718870162964 20.24788856506348 4.325311660766602 20.5116138458252 4.794176578521729 20.80448913574219 C 5.89409351348877 21.49361801147461 7.242974281311035 21.9935131072998 8.677274703979492 22.17624092102051 C 9.089977264404297 22.22868537902832 9.511262893676758 22.25538635253906 9.929421424865723 22.25538635253906 C 9.92949390411377 22.25538635253906 9.929421424865723 22.25538635253906 9.929603576660156 22.25538635253906 C 11.55638027191162 22.25538635253906 13.16886711120605 21.85663223266602 14.59221744537354 21.10247039794922 C 15.56399536132812 20.58768653869629 16.35452461242676 20.00200080871582 16.94229125976562 19.36103439331055 C 17.84602546691895 18.37420082092285 18.45695495605469 17.16987991333008 18.93566131591797 16.1216926574707 C 20.05271148681641 13.67372703552246 20.68313217163086 11.04225826263428 21.23304176330566 8.55744743347168 C 21.8172721862793 5.922638893127441 22.14830207824707 3.609406471252441 22.24485397338867 1.485448837280273 C 22.26292991638184 1.086597442626953 22.11248970031738 0.6986576914787292 21.83025360107422 0.4163218140602112 Z">
                            </path>
                        </svg>
                    </div>
                </div>
                <svg class="Ellipse_3_d">
                    <ellipse id="Ellipse_3_d" rx="63.5" ry="63.5" cx="63.5" cy="63.5">
                    </ellipse>
                </svg>
            </div>
        </div>
    </div>
</body>
</html>